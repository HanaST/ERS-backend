/**
 * Created by vadimdez on 21/06/16.
 */
import { ElementRef, EventEmitter, OnChanges, SimpleChanges, OnInit, OnDestroy, AfterViewChecked } from '@angular/core';
import { PDFDocumentProxy, PDFSource, PDFProgressData } from 'pdfjs-dist';
import * as ɵngcc0 from '@angular/core';
export declare enum RenderTextMode {
    DISABLED = 0,
    ENABLED = 1,
    ENHANCED = 2
}
export declare class PdfViewerComponent implements OnChanges, OnInit, OnDestroy, AfterViewChecked {
    private element;
    pdfViewerContainer: any;
    private isVisible;
    static CSS_UNITS: number;
    static BORDER_WIDTH: number;
    private pdfMultiPageViewer;
    private pdfMultiPageLinkService;
    private pdfMultiPageFindController;
    private pdfSinglePageViewer;
    private pdfSinglePageLinkService;
    private pdfSinglePageFindController;
    private _cMapsUrl;
    private _renderText;
    private _renderTextMode;
    private _stickToPage;
    private _originalSize;
    private _pdf;
    private _page;
    private _zoom;
    private _rotation;
    private _showAll;
    private _canAutoResize;
    private _fitToPage;
    private _externalLinkTarget;
    private _showBorders;
    private lastLoaded;
    private _latestScrolledPage;
    private resizeTimeout;
    private pageScrollTimeout;
    private isInitialized;
    private loadingTask;
    afterLoadComplete: EventEmitter<PDFDocumentProxy>;
    pageRendered: EventEmitter<CustomEvent<any>>;
    textLayerRendered: EventEmitter<CustomEvent<any>>;
    onError: EventEmitter<any>;
    onProgress: EventEmitter<PDFProgressData>;
    pageChange: EventEmitter<number>;
    src: string | Uint8Array | PDFSource;
    cMapsUrl: string;
    page: any;
    renderText: boolean;
    renderTextMode: RenderTextMode;
    originalSize: boolean;
    showAll: boolean;
    stickToPage: boolean;
    zoom: number;
    rotation: number;
    externalLinkTarget: string;
    autoresize: boolean;
    fitToPage: boolean;
    showBorders: boolean;
    static getLinkTarget(type: string): any;
    static setExternalLinkTarget(type: string): void;
    constructor(element: ElementRef);
    ngAfterViewChecked(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    onPageResize(): void;
    readonly pdfLinkService: any;
    readonly pdfViewer: any;
    readonly pdfFindController: any;
    ngOnChanges(changes: SimpleChanges): void;
    updateSize(): void;
    clear(): void;
    private setupMultiPageViewer;
    private setupSinglePageViewer;
    private getValidPageNumber;
    private getDocumentParams;
    private loadPDF;
    private update;
    private render;
    private getScale;
    private getCurrentViewer;
    private resetPdfDocument;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PdfViewerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PdfViewerComponent, "pdf-viewer", never, { "cMapsUrl": "c-maps-url"; "page": "page"; "renderText": "render-text"; "renderTextMode": "render-text-mode"; "originalSize": "original-size"; "showAll": "show-all"; "stickToPage": "stick-to-page"; "zoom": "zoom"; "rotation": "rotation"; "externalLinkTarget": "external-link-target"; "autoresize": "autoresize"; "fitToPage": "fit-to-page"; "showBorders": "show-borders"; "src": "src"; }, { "afterLoadComplete": "after-load-complete"; "pageRendered": "page-rendered"; "textLayerRendered": "text-layer-rendered"; "onError": "error"; "onProgress": "on-progress"; "pageChange": "pageChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGRmLXZpZXdlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicGRmLXZpZXdlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnRkEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdmFkaW1kZXogb24gMjEvMDYvMTYuXG4gKi9cbmltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBPbkluaXQsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3Q2hlY2tlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUERGRG9jdW1lbnRQcm94eSwgUERGU291cmNlLCBQREZQcm9ncmVzc0RhdGEgfSBmcm9tICdwZGZqcy1kaXN0JztcbmV4cG9ydCBkZWNsYXJlIGVudW0gUmVuZGVyVGV4dE1vZGUge1xuICAgIERJU0FCTEVEID0gMCxcbiAgICBFTkFCTEVEID0gMSxcbiAgICBFTkhBTkNFRCA9IDJcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBkZlZpZXdlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0NoZWNrZWQge1xuICAgIHByaXZhdGUgZWxlbWVudDtcbiAgICBwZGZWaWV3ZXJDb250YWluZXI6IGFueTtcbiAgICBwcml2YXRlIGlzVmlzaWJsZTtcbiAgICBzdGF0aWMgQ1NTX1VOSVRTOiBudW1iZXI7XG4gICAgc3RhdGljIEJPUkRFUl9XSURUSDogbnVtYmVyO1xuICAgIHByaXZhdGUgcGRmTXVsdGlQYWdlVmlld2VyO1xuICAgIHByaXZhdGUgcGRmTXVsdGlQYWdlTGlua1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBwZGZNdWx0aVBhZ2VGaW5kQ29udHJvbGxlcjtcbiAgICBwcml2YXRlIHBkZlNpbmdsZVBhZ2VWaWV3ZXI7XG4gICAgcHJpdmF0ZSBwZGZTaW5nbGVQYWdlTGlua1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBwZGZTaW5nbGVQYWdlRmluZENvbnRyb2xsZXI7XG4gICAgcHJpdmF0ZSBfY01hcHNVcmw7XG4gICAgcHJpdmF0ZSBfcmVuZGVyVGV4dDtcbiAgICBwcml2YXRlIF9yZW5kZXJUZXh0TW9kZTtcbiAgICBwcml2YXRlIF9zdGlja1RvUGFnZTtcbiAgICBwcml2YXRlIF9vcmlnaW5hbFNpemU7XG4gICAgcHJpdmF0ZSBfcGRmO1xuICAgIHByaXZhdGUgX3BhZ2U7XG4gICAgcHJpdmF0ZSBfem9vbTtcbiAgICBwcml2YXRlIF9yb3RhdGlvbjtcbiAgICBwcml2YXRlIF9zaG93QWxsO1xuICAgIHByaXZhdGUgX2NhbkF1dG9SZXNpemU7XG4gICAgcHJpdmF0ZSBfZml0VG9QYWdlO1xuICAgIHByaXZhdGUgX2V4dGVybmFsTGlua1RhcmdldDtcbiAgICBwcml2YXRlIF9zaG93Qm9yZGVycztcbiAgICBwcml2YXRlIGxhc3RMb2FkZWQ7XG4gICAgcHJpdmF0ZSBfbGF0ZXN0U2Nyb2xsZWRQYWdlO1xuICAgIHByaXZhdGUgcmVzaXplVGltZW91dDtcbiAgICBwcml2YXRlIHBhZ2VTY3JvbGxUaW1lb3V0O1xuICAgIHByaXZhdGUgaXNJbml0aWFsaXplZDtcbiAgICBwcml2YXRlIGxvYWRpbmdUYXNrO1xuICAgIGFmdGVyTG9hZENvbXBsZXRlOiBFdmVudEVtaXR0ZXI8UERGRG9jdW1lbnRQcm94eT47XG4gICAgcGFnZVJlbmRlcmVkOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8YW55Pj47XG4gICAgdGV4dExheWVyUmVuZGVyZWQ6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxhbnk+PjtcbiAgICBvbkVycm9yOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblByb2dyZXNzOiBFdmVudEVtaXR0ZXI8UERGUHJvZ3Jlc3NEYXRhPjtcbiAgICBwYWdlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICBzcmM6IHN0cmluZyB8IFVpbnQ4QXJyYXkgfCBQREZTb3VyY2U7XG4gICAgY01hcHNVcmw6IHN0cmluZztcbiAgICBwYWdlOiBhbnk7XG4gICAgcmVuZGVyVGV4dDogYm9vbGVhbjtcbiAgICByZW5kZXJUZXh0TW9kZTogUmVuZGVyVGV4dE1vZGU7XG4gICAgb3JpZ2luYWxTaXplOiBib29sZWFuO1xuICAgIHNob3dBbGw6IGJvb2xlYW47XG4gICAgc3RpY2tUb1BhZ2U6IGJvb2xlYW47XG4gICAgem9vbTogbnVtYmVyO1xuICAgIHJvdGF0aW9uOiBudW1iZXI7XG4gICAgZXh0ZXJuYWxMaW5rVGFyZ2V0OiBzdHJpbmc7XG4gICAgYXV0b3Jlc2l6ZTogYm9vbGVhbjtcbiAgICBmaXRUb1BhZ2U6IGJvb2xlYW47XG4gICAgc2hvd0JvcmRlcnM6IGJvb2xlYW47XG4gICAgc3RhdGljIGdldExpbmtUYXJnZXQodHlwZTogc3RyaW5nKTogYW55O1xuICAgIHN0YXRpYyBzZXRFeHRlcm5hbExpbmtUYXJnZXQodHlwZTogc3RyaW5nKTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmKTtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgb25QYWdlUmVzaXplKCk6IHZvaWQ7XG4gICAgcmVhZG9ubHkgcGRmTGlua1NlcnZpY2U6IGFueTtcbiAgICByZWFkb25seSBwZGZWaWV3ZXI6IGFueTtcbiAgICByZWFkb25seSBwZGZGaW5kQ29udHJvbGxlcjogYW55O1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIHVwZGF0ZVNpemUoKTogdm9pZDtcbiAgICBjbGVhcigpOiB2b2lkO1xuICAgIHByaXZhdGUgc2V0dXBNdWx0aVBhZ2VWaWV3ZXI7XG4gICAgcHJpdmF0ZSBzZXR1cFNpbmdsZVBhZ2VWaWV3ZXI7XG4gICAgcHJpdmF0ZSBnZXRWYWxpZFBhZ2VOdW1iZXI7XG4gICAgcHJpdmF0ZSBnZXREb2N1bWVudFBhcmFtcztcbiAgICBwcml2YXRlIGxvYWRQREY7XG4gICAgcHJpdmF0ZSB1cGRhdGU7XG4gICAgcHJpdmF0ZSByZW5kZXI7XG4gICAgcHJpdmF0ZSBnZXRTY2FsZTtcbiAgICBwcml2YXRlIGdldEN1cnJlbnRWaWV3ZXI7XG4gICAgcHJpdmF0ZSByZXNldFBkZkRvY3VtZW50O1xufVxuIl19