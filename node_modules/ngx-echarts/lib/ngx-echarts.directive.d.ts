import { AfterViewInit, DoCheck, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { EChartOption, ECharts } from 'echarts';
import * as ɵngcc0 from '@angular/core';
export declare class NgxEchartsDirective implements OnChanges, OnDestroy, OnInit, DoCheck, AfterViewInit {
    private el;
    private ngZone;
    options: EChartOption;
    theme: string;
    loading: boolean;
    initOpts: {
        devicePixelRatio?: number;
        renderer?: string;
        width?: number | string;
        height?: number | string;
    };
    merge: EChartOption;
    autoResize: boolean;
    loadingType: string;
    loadingOpts: object;
    detectEventChanges: boolean;
    chartInit: EventEmitter<ECharts>;
    chartClick: EventEmitter<{}>;
    chartDblClick: EventEmitter<{}>;
    chartMouseDown: EventEmitter<{}>;
    chartMouseMove: EventEmitter<{}>;
    chartMouseUp: EventEmitter<{}>;
    chartMouseOver: EventEmitter<{}>;
    chartMouseOut: EventEmitter<{}>;
    chartGlobalOut: EventEmitter<{}>;
    chartContextMenu: EventEmitter<{}>;
    chartLegendSelectChanged: EventEmitter<{}>;
    chartLegendSelected: EventEmitter<{}>;
    chartLegendUnselected: EventEmitter<{}>;
    chartLegendScroll: EventEmitter<{}>;
    chartDataZoom: EventEmitter<{}>;
    chartDataRangeSelected: EventEmitter<{}>;
    chartTimelineChanged: EventEmitter<{}>;
    chartTimelinePlayChanged: EventEmitter<{}>;
    chartRestore: EventEmitter<{}>;
    chartDataViewChanged: EventEmitter<{}>;
    chartMagicTypeChanged: EventEmitter<{}>;
    chartPieSelectChanged: EventEmitter<{}>;
    chartPieSelected: EventEmitter<{}>;
    chartPieUnselected: EventEmitter<{}>;
    chartMapSelectChanged: EventEmitter<{}>;
    chartMapSelected: EventEmitter<{}>;
    chartMapUnselected: EventEmitter<{}>;
    chartAxisAreaSelected: EventEmitter<{}>;
    chartFocusNodeAdjacency: EventEmitter<{}>;
    chartUnfocusNodeAdjacency: EventEmitter<{}>;
    chartBrush: EventEmitter<{}>;
    chartBrushSelected: EventEmitter<{}>;
    chartRendered: EventEmitter<{}>;
    chartFinished: EventEmitter<{}>;
    private chart;
    private currentOffsetWidth;
    private currentOffsetHeight;
    private currentWindowWidth;
    private resizeSub;
    constructor(el: ElementRef, ngZone: NgZone);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    ngAfterViewInit(): void;
    private dispose;
    private resize;
    private toggleLoading;
    private setOption;
    private refreshChart;
    private createChart;
    private initChart;
    private onOptionsChange;
    private createLazyEvent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxEchartsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgxEchartsDirective, "echarts, [echarts]", never, { "autoResize": "autoResize"; "loadingType": "loadingType"; "detectEventChanges": "detectEventChanges"; "options": "options"; "theme": "theme"; "loading": "loading"; "initOpts": "initOpts"; "merge": "merge"; "loadingOpts": "loadingOpts"; }, { "chartInit": "chartInit"; "chartClick": "chartClick"; "chartDblClick": "chartDblClick"; "chartMouseDown": "chartMouseDown"; "chartMouseMove": "chartMouseMove"; "chartMouseUp": "chartMouseUp"; "chartMouseOver": "chartMouseOver"; "chartMouseOut": "chartMouseOut"; "chartGlobalOut": "chartGlobalOut"; "chartContextMenu": "chartContextMenu"; "chartLegendSelectChanged": "chartLegendSelectChanged"; "chartLegendSelected": "chartLegendSelected"; "chartLegendUnselected": "chartLegendUnselected"; "chartLegendScroll": "chartLegendScroll"; "chartDataZoom": "chartDataZoom"; "chartDataRangeSelected": "chartDataRangeSelected"; "chartTimelineChanged": "chartTimelineChanged"; "chartTimelinePlayChanged": "chartTimelinePlayChanged"; "chartRestore": "chartRestore"; "chartDataViewChanged": "chartDataViewChanged"; "chartMagicTypeChanged": "chartMagicTypeChanged"; "chartPieSelectChanged": "chartPieSelectChanged"; "chartPieSelected": "chartPieSelected"; "chartPieUnselected": "chartPieUnselected"; "chartMapSelectChanged": "chartMapSelectChanged"; "chartMapSelected": "chartMapSelected"; "chartMapUnselected": "chartMapUnselected"; "chartAxisAreaSelected": "chartAxisAreaSelected"; "chartFocusNodeAdjacency": "chartFocusNodeAdjacency"; "chartUnfocusNodeAdjacency": "chartUnfocusNodeAdjacency"; "chartBrush": "chartBrush"; "chartBrushSelected": "chartBrushSelected"; "chartRendered": "chartRendered"; "chartFinished": "chartFinished"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWVjaGFydHMuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbIm5neC1lY2hhcnRzLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIERvQ2hlY2ssIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFQ2hhcnRPcHRpb24sIEVDaGFydHMgfSBmcm9tICdlY2hhcnRzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neEVjaGFydHNEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBEb0NoZWNrLCBBZnRlclZpZXdJbml0IHtcbiAgICBwcml2YXRlIGVsO1xuICAgIHByaXZhdGUgbmdab25lO1xuICAgIG9wdGlvbnM6IEVDaGFydE9wdGlvbjtcbiAgICB0aGVtZTogc3RyaW5nO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgaW5pdE9wdHM6IHtcbiAgICAgICAgZGV2aWNlUGl4ZWxSYXRpbz86IG51bWJlcjtcbiAgICAgICAgcmVuZGVyZXI/OiBzdHJpbmc7XG4gICAgICAgIHdpZHRoPzogbnVtYmVyIHwgc3RyaW5nO1xuICAgICAgICBoZWlnaHQ/OiBudW1iZXIgfCBzdHJpbmc7XG4gICAgfTtcbiAgICBtZXJnZTogRUNoYXJ0T3B0aW9uO1xuICAgIGF1dG9SZXNpemU6IGJvb2xlYW47XG4gICAgbG9hZGluZ1R5cGU6IHN0cmluZztcbiAgICBsb2FkaW5nT3B0czogb2JqZWN0O1xuICAgIGRldGVjdEV2ZW50Q2hhbmdlczogYm9vbGVhbjtcbiAgICBjaGFydEluaXQ6IEV2ZW50RW1pdHRlcjxFQ2hhcnRzPjtcbiAgICBjaGFydENsaWNrOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0RGJsQ2xpY2s6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRNb3VzZURvd246IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRNb3VzZU1vdmU6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRNb3VzZVVwOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0TW91c2VPdmVyOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0TW91c2VPdXQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRHbG9iYWxPdXQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRDb250ZXh0TWVudTogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydExlZ2VuZFNlbGVjdENoYW5nZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRMZWdlbmRTZWxlY3RlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydExlZ2VuZFVuc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRMZWdlbmRTY3JvbGw6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnREYXRhWm9vbTogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydERhdGFSYW5nZVNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0VGltZWxpbmVDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0VGltZWxpbmVQbGF5Q2hhbmdlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydFJlc3RvcmU6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnREYXRhVmlld0NoYW5nZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRNYWdpY1R5cGVDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0UGllU2VsZWN0Q2hhbmdlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydFBpZVNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0UGllVW5zZWxlY3RlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydE1hcFNlbGVjdENoYW5nZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRNYXBTZWxlY3RlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydE1hcFVuc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRBeGlzQXJlYVNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0Rm9jdXNOb2RlQWRqYWNlbmN5OiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0VW5mb2N1c05vZGVBZGphY2VuY3k6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRCcnVzaDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydEJydXNoU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRSZW5kZXJlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydEZpbmlzaGVkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIHByaXZhdGUgY2hhcnQ7XG4gICAgcHJpdmF0ZSBjdXJyZW50T2Zmc2V0V2lkdGg7XG4gICAgcHJpdmF0ZSBjdXJyZW50T2Zmc2V0SGVpZ2h0O1xuICAgIHByaXZhdGUgY3VycmVudFdpbmRvd1dpZHRoO1xuICAgIHByaXZhdGUgcmVzaXplU3ViO1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCBuZ1pvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIHByaXZhdGUgZGlzcG9zZTtcbiAgICBwcml2YXRlIHJlc2l6ZTtcbiAgICBwcml2YXRlIHRvZ2dsZUxvYWRpbmc7XG4gICAgcHJpdmF0ZSBzZXRPcHRpb247XG4gICAgcHJpdmF0ZSByZWZyZXNoQ2hhcnQ7XG4gICAgcHJpdmF0ZSBjcmVhdGVDaGFydDtcbiAgICBwcml2YXRlIGluaXRDaGFydDtcbiAgICBwcml2YXRlIG9uT3B0aW9uc0NoYW5nZTtcbiAgICBwcml2YXRlIGNyZWF0ZUxhenlFdmVudDtcbn1cbiJdfQ==