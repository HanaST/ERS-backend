import { AfterViewInit, DoCheck, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { EChartOption, ECharts } from 'echarts';
import * as ɵngcc0 from '@angular/core';
export declare class NgxEchartsCoreDirective implements OnChanges, OnDestroy, OnInit, DoCheck, AfterViewInit {
    private el;
    private ngZone;
    options: EChartOption;
    theme: string;
    loading: boolean;
    initOpts: {
        devicePixelRatio?: number;
        renderer?: string;
        width?: number | string;
        height?: number | string;
    };
    merge: EChartOption;
    autoResize: boolean;
    loadingType: string;
    loadingOpts: object;
    detectEventChanges: boolean;
    chartInit: EventEmitter<ECharts>;
    chartClick: EventEmitter<{}>;
    chartDblClick: EventEmitter<{}>;
    chartMouseDown: EventEmitter<{}>;
    chartMouseMove: EventEmitter<{}>;
    chartMouseUp: EventEmitter<{}>;
    chartMouseOver: EventEmitter<{}>;
    chartMouseOut: EventEmitter<{}>;
    chartGlobalOut: EventEmitter<{}>;
    chartContextMenu: EventEmitter<{}>;
    chartLegendSelectChanged: EventEmitter<{}>;
    chartLegendSelected: EventEmitter<{}>;
    chartLegendUnselected: EventEmitter<{}>;
    chartLegendScroll: EventEmitter<{}>;
    chartDataZoom: EventEmitter<{}>;
    chartDataRangeSelected: EventEmitter<{}>;
    chartTimelineChanged: EventEmitter<{}>;
    chartTimelinePlayChanged: EventEmitter<{}>;
    chartRestore: EventEmitter<{}>;
    chartDataViewChanged: EventEmitter<{}>;
    chartMagicTypeChanged: EventEmitter<{}>;
    chartPieSelectChanged: EventEmitter<{}>;
    chartPieSelected: EventEmitter<{}>;
    chartPieUnselected: EventEmitter<{}>;
    chartMapSelectChanged: EventEmitter<{}>;
    chartMapSelected: EventEmitter<{}>;
    chartMapUnselected: EventEmitter<{}>;
    chartAxisAreaSelected: EventEmitter<{}>;
    chartFocusNodeAdjacency: EventEmitter<{}>;
    chartUnfocusNodeAdjacency: EventEmitter<{}>;
    chartBrush: EventEmitter<{}>;
    chartBrushSelected: EventEmitter<{}>;
    chartRendered: EventEmitter<{}>;
    chartFinished: EventEmitter<{}>;
    private chart;
    private currentOffsetWidth;
    private currentOffsetHeight;
    private currentWindowWidth;
    private resizeSub;
    constructor(el: ElementRef, ngZone: NgZone);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    ngAfterViewInit(): void;
    private dispose;
    private resize;
    private toggleLoading;
    private setOption;
    private refreshChart;
    private createChart;
    private initChart;
    private onOptionsChange;
    private createLazyEvent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxEchartsCoreDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgxEchartsCoreDirective, "echarts, [echarts]", never, { "autoResize": "autoResize"; "loadingType": "loadingType"; "detectEventChanges": "detectEventChanges"; "options": "options"; "theme": "theme"; "loading": "loading"; "initOpts": "initOpts"; "merge": "merge"; "loadingOpts": "loadingOpts"; }, { "chartInit": "chartInit"; "chartClick": "chartClick"; "chartDblClick": "chartDblClick"; "chartMouseDown": "chartMouseDown"; "chartMouseMove": "chartMouseMove"; "chartMouseUp": "chartMouseUp"; "chartMouseOver": "chartMouseOver"; "chartMouseOut": "chartMouseOut"; "chartGlobalOut": "chartGlobalOut"; "chartContextMenu": "chartContextMenu"; "chartLegendSelectChanged": "chartLegendSelectChanged"; "chartLegendSelected": "chartLegendSelected"; "chartLegendUnselected": "chartLegendUnselected"; "chartLegendScroll": "chartLegendScroll"; "chartDataZoom": "chartDataZoom"; "chartDataRangeSelected": "chartDataRangeSelected"; "chartTimelineChanged": "chartTimelineChanged"; "chartTimelinePlayChanged": "chartTimelinePlayChanged"; "chartRestore": "chartRestore"; "chartDataViewChanged": "chartDataViewChanged"; "chartMagicTypeChanged": "chartMagicTypeChanged"; "chartPieSelectChanged": "chartPieSelectChanged"; "chartPieSelected": "chartPieSelected"; "chartPieUnselected": "chartPieUnselected"; "chartMapSelectChanged": "chartMapSelectChanged"; "chartMapSelected": "chartMapSelected"; "chartMapUnselected": "chartMapUnselected"; "chartAxisAreaSelected": "chartAxisAreaSelected"; "chartFocusNodeAdjacency": "chartFocusNodeAdjacency"; "chartUnfocusNodeAdjacency": "chartUnfocusNodeAdjacency"; "chartBrush": "chartBrush"; "chartBrushSelected": "chartBrushSelected"; "chartRendered": "chartRendered"; "chartFinished": "chartFinished"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWVjaGFydHMtY29yZS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsibmd4LWVjaGFydHMtY29yZS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1RUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBEb0NoZWNrLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRUNoYXJ0T3B0aW9uLCBFQ2hhcnRzIH0gZnJvbSAnZWNoYXJ0cyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hFY2hhcnRzQ29yZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIERvQ2hlY2ssIEFmdGVyVmlld0luaXQge1xuICAgIHByaXZhdGUgZWw7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgb3B0aW9uczogRUNoYXJ0T3B0aW9uO1xuICAgIHRoZW1lOiBzdHJpbmc7XG4gICAgbG9hZGluZzogYm9vbGVhbjtcbiAgICBpbml0T3B0czoge1xuICAgICAgICBkZXZpY2VQaXhlbFJhdGlvPzogbnVtYmVyO1xuICAgICAgICByZW5kZXJlcj86IHN0cmluZztcbiAgICAgICAgd2lkdGg/OiBudW1iZXIgfCBzdHJpbmc7XG4gICAgICAgIGhlaWdodD86IG51bWJlciB8IHN0cmluZztcbiAgICB9O1xuICAgIG1lcmdlOiBFQ2hhcnRPcHRpb247XG4gICAgYXV0b1Jlc2l6ZTogYm9vbGVhbjtcbiAgICBsb2FkaW5nVHlwZTogc3RyaW5nO1xuICAgIGxvYWRpbmdPcHRzOiBvYmplY3Q7XG4gICAgZGV0ZWN0RXZlbnRDaGFuZ2VzOiBib29sZWFuO1xuICAgIGNoYXJ0SW5pdDogRXZlbnRFbWl0dGVyPEVDaGFydHM+O1xuICAgIGNoYXJ0Q2xpY2s6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnREYmxDbGljazogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydE1vdXNlRG93bjogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydE1vdXNlTW92ZTogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydE1vdXNlVXA6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRNb3VzZU92ZXI6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRNb3VzZU91dDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydEdsb2JhbE91dDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydENvbnRleHRNZW51OiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0TGVnZW5kU2VsZWN0Q2hhbmdlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydExlZ2VuZFNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0TGVnZW5kVW5zZWxlY3RlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydExlZ2VuZFNjcm9sbDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydERhdGFab29tOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0RGF0YVJhbmdlU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRUaW1lbGluZUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRUaW1lbGluZVBsYXlDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0UmVzdG9yZTogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydERhdGFWaWV3Q2hhbmdlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydE1hZ2ljVHlwZUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRQaWVTZWxlY3RDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0UGllU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRQaWVVbnNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0TWFwU2VsZWN0Q2hhbmdlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydE1hcFNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0TWFwVW5zZWxlY3RlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydEF4aXNBcmVhU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRGb2N1c05vZGVBZGphY2VuY3k6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRVbmZvY3VzTm9kZUFkamFjZW5jeTogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydEJydXNoOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0QnJ1c2hTZWxlY3RlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydFJlbmRlcmVkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0RmluaXNoZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgcHJpdmF0ZSBjaGFydDtcbiAgICBwcml2YXRlIGN1cnJlbnRPZmZzZXRXaWR0aDtcbiAgICBwcml2YXRlIGN1cnJlbnRPZmZzZXRIZWlnaHQ7XG4gICAgcHJpdmF0ZSBjdXJyZW50V2luZG93V2lkdGg7XG4gICAgcHJpdmF0ZSByZXNpemVTdWI7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIG5nWm9uZTogTmdab25lKTtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBkaXNwb3NlO1xuICAgIHByaXZhdGUgcmVzaXplO1xuICAgIHByaXZhdGUgdG9nZ2xlTG9hZGluZztcbiAgICBwcml2YXRlIHNldE9wdGlvbjtcbiAgICBwcml2YXRlIHJlZnJlc2hDaGFydDtcbiAgICBwcml2YXRlIGNyZWF0ZUNoYXJ0O1xuICAgIHByaXZhdGUgaW5pdENoYXJ0O1xuICAgIHByaXZhdGUgb25PcHRpb25zQ2hhbmdlO1xuICAgIHByaXZhdGUgY3JlYXRlTGF6eUV2ZW50O1xufVxuIl19