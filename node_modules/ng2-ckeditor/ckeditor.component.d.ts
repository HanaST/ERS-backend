import { EventEmitter, NgZone, QueryList, AfterViewInit, SimpleChanges, OnChanges } from '@angular/core';
import { CKButtonDirective } from './ckbutton.directive';
import { CKGroupDirective } from './ckgroup.directive';
/**
 * CKEditor component
 * Usage :
 *  <ckeditor [(ngModel)]="data" [config]="{...}" debounce="500"></ckeditor>
 */
import * as ɵngcc0 from '@angular/core';
export declare class CKEditorComponent implements OnChanges, AfterViewInit {
    private zone;
    config: any;
    readonly: boolean;
    debounce: string;
    change: EventEmitter<any>;
    editorChange: EventEmitter<any>;
    ready: EventEmitter<any>;
    blur: EventEmitter<any>;
    focus: EventEmitter<any>;
    contentDom: EventEmitter<any>;
    fileUploadRequest: EventEmitter<any>;
    fileUploadResponse: EventEmitter<any>;
    paste: EventEmitter<any>;
    drop: EventEmitter<any>;
    host: any;
    toolbarButtons: QueryList<CKButtonDirective>;
    toolbarGroups: QueryList<CKGroupDirective>;
    _value: string;
    instance: any;
    debounceTimeout: any;
    /**
     * Constructor
     */
    constructor(zone: NgZone);
    value: any;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * On component destroy
     */
    ngOnDestroy(): void;
    /**
     * On component view init
     */
    ngAfterViewInit(): void;
    /**
     * On component view checked
     */
    ngAfterViewChecked(): void;
    /**
     * Value update process
     */
    updateValue(value: any): void;
    /**
     * CKEditor init
     */
    ckeditorInit(config: any): void;
    /**
     * Implements ControlValueAccessor
     */
    writeValue(value: any): void;
    onChange(_: any): void;
    onTouched(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    private documentContains;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CKEditorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CKEditorComponent, "ckeditor", never, { "value": "value"; "config": "config"; "readonly": "readonly"; "debounce": "debounce"; }, { "change": "change"; "editorChange": "editorChange"; "ready": "ready"; "blur": "blur"; "focus": "focus"; "contentDom": "contentDom"; "fileUploadRequest": "fileUploadRequest"; "fileUploadResponse": "fileUploadResponse"; "paste": "paste"; "drop": "drop"; }, ["toolbarButtons", "toolbarGroups"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2tlZGl0b3IuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNrZWRpdG9yLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdEQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgTmdab25lLCBRdWVyeUxpc3QsIEFmdGVyVmlld0luaXQsIFNpbXBsZUNoYW5nZXMsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ0tCdXR0b25EaXJlY3RpdmUgfSBmcm9tICcuL2NrYnV0dG9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBDS0dyb3VwRGlyZWN0aXZlIH0gZnJvbSAnLi9ja2dyb3VwLmRpcmVjdGl2ZSc7XG4vKipcbiAqIENLRWRpdG9yIGNvbXBvbmVudFxuICogVXNhZ2UgOlxuICogIDxja2VkaXRvciBbKG5nTW9kZWwpXT1cImRhdGFcIiBbY29uZmlnXT1cInsuLi59XCIgZGVib3VuY2U9XCI1MDBcIj48L2NrZWRpdG9yPlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDS0VkaXRvckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIGNvbmZpZzogYW55O1xuICAgIHJlYWRvbmx5OiBib29sZWFuO1xuICAgIGRlYm91bmNlOiBzdHJpbmc7XG4gICAgY2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBlZGl0b3JDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHJlYWR5OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBibHVyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBmb2N1czogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY29udGVudERvbTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZmlsZVVwbG9hZFJlcXVlc3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGZpbGVVcGxvYWRSZXNwb25zZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcGFzdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGRyb3A6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGhvc3Q6IGFueTtcbiAgICB0b29sYmFyQnV0dG9uczogUXVlcnlMaXN0PENLQnV0dG9uRGlyZWN0aXZlPjtcbiAgICB0b29sYmFyR3JvdXBzOiBRdWVyeUxpc3Q8Q0tHcm91cERpcmVjdGl2ZT47XG4gICAgX3ZhbHVlOiBzdHJpbmc7XG4gICAgaW5zdGFuY2U6IGFueTtcbiAgICBkZWJvdW5jZVRpbWVvdXQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHpvbmU6IE5nWm9uZSk7XG4gICAgdmFsdWU6IGFueTtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBPbiBjb21wb25lbnQgZGVzdHJveVxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogT24gY29tcG9uZW50IHZpZXcgaW5pdFxuICAgICAqL1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9uIGNvbXBvbmVudCB2aWV3IGNoZWNrZWRcbiAgICAgKi9cbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBWYWx1ZSB1cGRhdGUgcHJvY2Vzc1xuICAgICAqL1xuICAgIHVwZGF0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENLRWRpdG9yIGluaXRcbiAgICAgKi9cbiAgICBja2VkaXRvckluaXQoY29uZmlnOiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3JcbiAgICAgKi9cbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIG9uQ2hhbmdlKF86IGFueSk6IHZvaWQ7XG4gICAgb25Ub3VjaGVkKCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICBwcml2YXRlIGRvY3VtZW50Q29udGFpbnM7XG59XG4iXX0=