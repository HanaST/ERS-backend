import { OnChanges, ElementRef, EventEmitter, AfterViewInit, SimpleChanges } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class YAxisTicksComponent implements OnChanges, AfterViewInit {
    scale: any;
    orient: any;
    tickArguments: number[];
    tickValues: any[];
    tickStroke: string;
    trimTicks: boolean;
    maxTickLength: number;
    tickFormatting: any;
    showGridLines: boolean;
    gridLineWidth: any;
    height: any;
    referenceLines: any;
    showRefLabels: boolean;
    showRefLines: boolean;
    dimensionsChanged: EventEmitter<any>;
    innerTickSize: any;
    tickPadding: any;
    tickSpacing: any;
    verticalSpacing: number;
    textAnchor: any;
    dy: any;
    x1: any;
    x2: any;
    y1: any;
    y2: any;
    adjustedScale: any;
    transform: (o: any) => string;
    tickFormat: (o: any) => string;
    ticks: any;
    width: number;
    outerTickSize: number;
    rotateLabels: boolean;
    refMax: number;
    refMin: number;
    referenceLineLength: number;
    referenceAreaPath: string;
    ticksElement: ElementRef;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    updateDims(): void;
    update(): void;
    setReferencelines(): void;
    getTicks(): any;
    getMaxTicks(tickHeight: number): number;
    tickTransform(tick: any): string;
    gridLineTransform(): string;
    tickTrim(label: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<YAxisTicksComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<YAxisTicksComponent, "g[ngx-charts-y-axis-ticks]", never, { "tickArguments": "tickArguments"; "tickStroke": "tickStroke"; "trimTicks": "trimTicks"; "maxTickLength": "maxTickLength"; "showGridLines": "showGridLines"; "showRefLabels": "showRefLabels"; "showRefLines": "showRefLines"; "scale": "scale"; "orient": "orient"; "tickValues": "tickValues"; "tickFormatting": "tickFormatting"; "gridLineWidth": "gridLineWidth"; "height": "height"; "referenceLines": "referenceLines"; }, { "dimensionsChanged": "dimensionsChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieS1heGlzLXRpY2tzLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ5LWF4aXMtdGlja3MuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0RBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25DaGFuZ2VzLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEFmdGVyVmlld0luaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFlBeGlzVGlja3NDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQge1xuICAgIHNjYWxlOiBhbnk7XG4gICAgb3JpZW50OiBhbnk7XG4gICAgdGlja0FyZ3VtZW50czogbnVtYmVyW107XG4gICAgdGlja1ZhbHVlczogYW55W107XG4gICAgdGlja1N0cm9rZTogc3RyaW5nO1xuICAgIHRyaW1UaWNrczogYm9vbGVhbjtcbiAgICBtYXhUaWNrTGVuZ3RoOiBudW1iZXI7XG4gICAgdGlja0Zvcm1hdHRpbmc6IGFueTtcbiAgICBzaG93R3JpZExpbmVzOiBib29sZWFuO1xuICAgIGdyaWRMaW5lV2lkdGg6IGFueTtcbiAgICBoZWlnaHQ6IGFueTtcbiAgICByZWZlcmVuY2VMaW5lczogYW55O1xuICAgIHNob3dSZWZMYWJlbHM6IGJvb2xlYW47XG4gICAgc2hvd1JlZkxpbmVzOiBib29sZWFuO1xuICAgIGRpbWVuc2lvbnNDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBpbm5lclRpY2tTaXplOiBhbnk7XG4gICAgdGlja1BhZGRpbmc6IGFueTtcbiAgICB0aWNrU3BhY2luZzogYW55O1xuICAgIHZlcnRpY2FsU3BhY2luZzogbnVtYmVyO1xuICAgIHRleHRBbmNob3I6IGFueTtcbiAgICBkeTogYW55O1xuICAgIHgxOiBhbnk7XG4gICAgeDI6IGFueTtcbiAgICB5MTogYW55O1xuICAgIHkyOiBhbnk7XG4gICAgYWRqdXN0ZWRTY2FsZTogYW55O1xuICAgIHRyYW5zZm9ybTogKG86IGFueSkgPT4gc3RyaW5nO1xuICAgIHRpY2tGb3JtYXQ6IChvOiBhbnkpID0+IHN0cmluZztcbiAgICB0aWNrczogYW55O1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgb3V0ZXJUaWNrU2l6ZTogbnVtYmVyO1xuICAgIHJvdGF0ZUxhYmVsczogYm9vbGVhbjtcbiAgICByZWZNYXg6IG51bWJlcjtcbiAgICByZWZNaW46IG51bWJlcjtcbiAgICByZWZlcmVuY2VMaW5lTGVuZ3RoOiBudW1iZXI7XG4gICAgcmVmZXJlbmNlQXJlYVBhdGg6IHN0cmluZztcbiAgICB0aWNrc0VsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgdXBkYXRlRGltcygpOiB2b2lkO1xuICAgIHVwZGF0ZSgpOiB2b2lkO1xuICAgIHNldFJlZmVyZW5jZWxpbmVzKCk6IHZvaWQ7XG4gICAgZ2V0VGlja3MoKTogYW55O1xuICAgIGdldE1heFRpY2tzKHRpY2tIZWlnaHQ6IG51bWJlcik6IG51bWJlcjtcbiAgICB0aWNrVHJhbnNmb3JtKHRpY2s6IGFueSk6IHN0cmluZztcbiAgICBncmlkTGluZVRyYW5zZm9ybSgpOiBzdHJpbmc7XG4gICAgdGlja1RyaW0obGFiZWw6IHN0cmluZyk6IHN0cmluZztcbn1cbiJdfQ==