import { TemplateRef, EventEmitter } from '@angular/core';
import { BaseChartComponent } from '../common/base-chart.component';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import * as ɵngcc0 from '@angular/core';
export declare class HeatMapComponent extends BaseChartComponent {
    legend: any;
    legendTitle: string;
    legendPosition: string;
    xAxis: any;
    yAxis: any;
    showXAxisLabel: any;
    showYAxisLabel: any;
    xAxisLabel: any;
    yAxisLabel: any;
    gradient: boolean;
    innerPadding: number | number[];
    trimXAxisTicks: boolean;
    trimYAxisTicks: boolean;
    rotateXAxisTicks: boolean;
    maxXAxisTickLength: number;
    maxYAxisTickLength: number;
    xAxisTickFormatting: any;
    yAxisTickFormatting: any;
    xAxisTicks: any[];
    yAxisTicks: any[];
    tooltipDisabled: boolean;
    tooltipText: any;
    min: any;
    max: any;
    activeEntries: any[];
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    xDomain: any[];
    yDomain: any[];
    valueDomain: any[];
    xScale: any;
    yScale: any;
    color: any;
    colors: ColorHelper;
    colorScale: any;
    transform: string;
    rects: any[];
    margin: number[];
    xAxisHeight: number;
    yAxisWidth: number;
    legendOptions: any;
    scaleType: string;
    update(): void;
    getXDomain(): any;
    getYDomain(): any[];
    getValueDomain(): any[];
    /**
     * Converts the input to gap paddingInner in fraction
     * Supports the following inputs:
     *    Numbers: 8
     *    Strings: "8", "8px", "8%"
     *    Arrays: [8,2], "8,2", "[8,2]"
     *    Mixed: [8,"2%"], ["8px","2%"], "8,2%", "[8,2%]"
     *
     * @memberOf HeatMapComponent
     */
    getDimension(value: string | number | Array<string | number>, index: number, N: number, L: number): number;
    getXScale(): any;
    getYScale(): any;
    getRects(): any[];
    onClick(data: any): void;
    setColors(): void;
    getLegendOptions(): {
        scaleType: string;
        domain: any[];
        colors: any;
        title: string;
        position: string;
    };
    updateYAxisWidth({ width }: {
        width: any;
    }): void;
    updateXAxisHeight({ height }: {
        height: any;
    }): void;
    onActivate(event: any, group: any, fromLegend?: boolean): void;
    onDeactivate(event: any, group: any, fromLegend?: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HeatMapComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<HeatMapComponent, "ngx-charts-heat-map", never, { "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "innerPadding": "innerPadding"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "tooltipDisabled": "tooltipDisabled"; "activeEntries": "activeEntries"; "legend": "legend"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "gradient": "gradient"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "tooltipText": "tooltipText"; "min": "min"; "max": "max"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhdC1tYXAuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImhlYXQtbWFwLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0ZBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGVSZWYsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZUNoYXJ0Q29tcG9uZW50IH0gZnJvbSAnLi4vY29tbW9uL2Jhc2UtY2hhcnQuY29tcG9uZW50JztcbmltcG9ydCB7IFZpZXdEaW1lbnNpb25zIH0gZnJvbSAnLi4vY29tbW9uL3ZpZXctZGltZW5zaW9ucy5oZWxwZXInO1xuaW1wb3J0IHsgQ29sb3JIZWxwZXIgfSBmcm9tICcuLi9jb21tb24vY29sb3IuaGVscGVyJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEhlYXRNYXBDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ2hhcnRDb21wb25lbnQge1xuICAgIGxlZ2VuZDogYW55O1xuICAgIGxlZ2VuZFRpdGxlOiBzdHJpbmc7XG4gICAgbGVnZW5kUG9zaXRpb246IHN0cmluZztcbiAgICB4QXhpczogYW55O1xuICAgIHlBeGlzOiBhbnk7XG4gICAgc2hvd1hBeGlzTGFiZWw6IGFueTtcbiAgICBzaG93WUF4aXNMYWJlbDogYW55O1xuICAgIHhBeGlzTGFiZWw6IGFueTtcbiAgICB5QXhpc0xhYmVsOiBhbnk7XG4gICAgZ3JhZGllbnQ6IGJvb2xlYW47XG4gICAgaW5uZXJQYWRkaW5nOiBudW1iZXIgfCBudW1iZXJbXTtcbiAgICB0cmltWEF4aXNUaWNrczogYm9vbGVhbjtcbiAgICB0cmltWUF4aXNUaWNrczogYm9vbGVhbjtcbiAgICByb3RhdGVYQXhpc1RpY2tzOiBib29sZWFuO1xuICAgIG1heFhBeGlzVGlja0xlbmd0aDogbnVtYmVyO1xuICAgIG1heFlBeGlzVGlja0xlbmd0aDogbnVtYmVyO1xuICAgIHhBeGlzVGlja0Zvcm1hdHRpbmc6IGFueTtcbiAgICB5QXhpc1RpY2tGb3JtYXR0aW5nOiBhbnk7XG4gICAgeEF4aXNUaWNrczogYW55W107XG4gICAgeUF4aXNUaWNrczogYW55W107XG4gICAgdG9vbHRpcERpc2FibGVkOiBib29sZWFuO1xuICAgIHRvb2x0aXBUZXh0OiBhbnk7XG4gICAgbWluOiBhbnk7XG4gICAgbWF4OiBhbnk7XG4gICAgYWN0aXZlRW50cmllczogYW55W107XG4gICAgYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGRlYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHRvb2x0aXBUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBkaW1zOiBWaWV3RGltZW5zaW9ucztcbiAgICB4RG9tYWluOiBhbnlbXTtcbiAgICB5RG9tYWluOiBhbnlbXTtcbiAgICB2YWx1ZURvbWFpbjogYW55W107XG4gICAgeFNjYWxlOiBhbnk7XG4gICAgeVNjYWxlOiBhbnk7XG4gICAgY29sb3I6IGFueTtcbiAgICBjb2xvcnM6IENvbG9ySGVscGVyO1xuICAgIGNvbG9yU2NhbGU6IGFueTtcbiAgICB0cmFuc2Zvcm06IHN0cmluZztcbiAgICByZWN0czogYW55W107XG4gICAgbWFyZ2luOiBudW1iZXJbXTtcbiAgICB4QXhpc0hlaWdodDogbnVtYmVyO1xuICAgIHlBeGlzV2lkdGg6IG51bWJlcjtcbiAgICBsZWdlbmRPcHRpb25zOiBhbnk7XG4gICAgc2NhbGVUeXBlOiBzdHJpbmc7XG4gICAgdXBkYXRlKCk6IHZvaWQ7XG4gICAgZ2V0WERvbWFpbigpOiBhbnk7XG4gICAgZ2V0WURvbWFpbigpOiBhbnlbXTtcbiAgICBnZXRWYWx1ZURvbWFpbigpOiBhbnlbXTtcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgaW5wdXQgdG8gZ2FwIHBhZGRpbmdJbm5lciBpbiBmcmFjdGlvblxuICAgICAqIFN1cHBvcnRzIHRoZSBmb2xsb3dpbmcgaW5wdXRzOlxuICAgICAqICAgIE51bWJlcnM6IDhcbiAgICAgKiAgICBTdHJpbmdzOiBcIjhcIiwgXCI4cHhcIiwgXCI4JVwiXG4gICAgICogICAgQXJyYXlzOiBbOCwyXSwgXCI4LDJcIiwgXCJbOCwyXVwiXG4gICAgICogICAgTWl4ZWQ6IFs4LFwiMiVcIl0sIFtcIjhweFwiLFwiMiVcIl0sIFwiOCwyJVwiLCBcIls4LDIlXVwiXG4gICAgICpcbiAgICAgKiBAbWVtYmVyT2YgSGVhdE1hcENvbXBvbmVudFxuICAgICAqL1xuICAgIGdldERpbWVuc2lvbih2YWx1ZTogc3RyaW5nIHwgbnVtYmVyIHwgQXJyYXk8c3RyaW5nIHwgbnVtYmVyPiwgaW5kZXg6IG51bWJlciwgTjogbnVtYmVyLCBMOiBudW1iZXIpOiBudW1iZXI7XG4gICAgZ2V0WFNjYWxlKCk6IGFueTtcbiAgICBnZXRZU2NhbGUoKTogYW55O1xuICAgIGdldFJlY3RzKCk6IGFueVtdO1xuICAgIG9uQ2xpY2soZGF0YTogYW55KTogdm9pZDtcbiAgICBzZXRDb2xvcnMoKTogdm9pZDtcbiAgICBnZXRMZWdlbmRPcHRpb25zKCk6IHtcbiAgICAgICAgc2NhbGVUeXBlOiBzdHJpbmc7XG4gICAgICAgIGRvbWFpbjogYW55W107XG4gICAgICAgIGNvbG9yczogYW55O1xuICAgICAgICB0aXRsZTogc3RyaW5nO1xuICAgICAgICBwb3NpdGlvbjogc3RyaW5nO1xuICAgIH07XG4gICAgdXBkYXRlWUF4aXNXaWR0aCh7IHdpZHRoIH06IHtcbiAgICAgICAgd2lkdGg6IGFueTtcbiAgICB9KTogdm9pZDtcbiAgICB1cGRhdGVYQXhpc0hlaWdodCh7IGhlaWdodCB9OiB7XG4gICAgICAgIGhlaWdodDogYW55O1xuICAgIH0pOiB2b2lkO1xuICAgIG9uQWN0aXZhdGUoZXZlbnQ6IGFueSwgZ3JvdXA6IGFueSwgZnJvbUxlZ2VuZD86IGJvb2xlYW4pOiB2b2lkO1xuICAgIG9uRGVhY3RpdmF0ZShldmVudDogYW55LCBncm91cDogYW55LCBmcm9tTGVnZW5kPzogYm9vbGVhbik6IHZvaWQ7XG59XG4iXX0=