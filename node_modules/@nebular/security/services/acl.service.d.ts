import { NbAclOptions, NbAccessControl } from '../security.options';
/**
 * Common acl service.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbAclService {
    protected settings: NbAclOptions;
    private static readonly ANY_RESOURCE;
    private state;
    constructor(settings?: NbAclOptions);
    /**
     * Set/Reset ACL list
     * @param {NbAccessControl} list
     */
    setAccessControl(list: NbAccessControl): void;
    /**
     * Register a new role with a list of abilities (permission/resources combinations)
     * @param {string} role
     * @param {string} parent
     * @param {[permission: string]: string|string[]} abilities
     */
    register(role: string, parent?: string, abilities?: {
        [permission: string]: string | string[];
    }): void;
    /**
     * Allow a permission for specific resources to a role
     * @param {string} role
     * @param {string} permission
     * @param {string | string[]} resource
     */
    allow(role: string, permission: string, resource: string | string[]): void;
    /**
     * Check whether the role has a permission to a resource
     * @param {string} role
     * @param {string} permission
     * @param {string} resource
     * @returns {boolean}
     */
    can(role: string, permission: string, resource: string): any;
    private getRole;
    private validateRole;
    private validateResource;
    private exactCan;
    private getRoleResources;
    private getRoleAbilities;
    private getRoleParent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbAclService, [{ optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbAclService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNsLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiYWNsLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5iQWNsT3B0aW9ucywgTmJBY2Nlc3NDb250cm9sIH0gZnJvbSAnLi4vc2VjdXJpdHkub3B0aW9ucyc7XG4vKipcbiAqIENvbW1vbiBhY2wgc2VydmljZS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJBY2xTZXJ2aWNlIHtcbiAgICBwcm90ZWN0ZWQgc2V0dGluZ3M6IE5iQWNsT3B0aW9ucztcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBBTllfUkVTT1VSQ0U7XG4gICAgcHJpdmF0ZSBzdGF0ZTtcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncz86IE5iQWNsT3B0aW9ucyk7XG4gICAgLyoqXG4gICAgICogU2V0L1Jlc2V0IEFDTCBsaXN0XG4gICAgICogQHBhcmFtIHtOYkFjY2Vzc0NvbnRyb2x9IGxpc3RcbiAgICAgKi9cbiAgICBzZXRBY2Nlc3NDb250cm9sKGxpc3Q6IE5iQWNjZXNzQ29udHJvbCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBuZXcgcm9sZSB3aXRoIGEgbGlzdCBvZiBhYmlsaXRpZXMgKHBlcm1pc3Npb24vcmVzb3VyY2VzIGNvbWJpbmF0aW9ucylcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcm9sZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRcbiAgICAgKiBAcGFyYW0ge1twZXJtaXNzaW9uOiBzdHJpbmddOiBzdHJpbmd8c3RyaW5nW119IGFiaWxpdGllc1xuICAgICAqL1xuICAgIHJlZ2lzdGVyKHJvbGU6IHN0cmluZywgcGFyZW50Pzogc3RyaW5nLCBhYmlsaXRpZXM/OiB7XG4gICAgICAgIFtwZXJtaXNzaW9uOiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICB9KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBBbGxvdyBhIHBlcm1pc3Npb24gZm9yIHNwZWNpZmljIHJlc291cmNlcyB0byBhIHJvbGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcm9sZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwZXJtaXNzaW9uXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCBzdHJpbmdbXX0gcmVzb3VyY2VcbiAgICAgKi9cbiAgICBhbGxvdyhyb2xlOiBzdHJpbmcsIHBlcm1pc3Npb246IHN0cmluZywgcmVzb3VyY2U6IHN0cmluZyB8IHN0cmluZ1tdKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDaGVjayB3aGV0aGVyIHRoZSByb2xlIGhhcyBhIHBlcm1pc3Npb24gdG8gYSByZXNvdXJjZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByb2xlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBlcm1pc3Npb25cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2VcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBjYW4ocm9sZTogc3RyaW5nLCBwZXJtaXNzaW9uOiBzdHJpbmcsIHJlc291cmNlOiBzdHJpbmcpOiBhbnk7XG4gICAgcHJpdmF0ZSBnZXRSb2xlO1xuICAgIHByaXZhdGUgdmFsaWRhdGVSb2xlO1xuICAgIHByaXZhdGUgdmFsaWRhdGVSZXNvdXJjZTtcbiAgICBwcml2YXRlIGV4YWN0Q2FuO1xuICAgIHByaXZhdGUgZ2V0Um9sZVJlc291cmNlcztcbiAgICBwcml2YXRlIGdldFJvbGVBYmlsaXRpZXM7XG4gICAgcHJpdmF0ZSBnZXRSb2xlUGFyZW50O1xufVxuIl19