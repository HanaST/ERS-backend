import { Observable, Subject } from 'rxjs';
/**
 * Layout dimensions type
 */
import * as ɵngcc0 from '@angular/core';
export interface NbLayoutDimensions {
    /**
     * clientWidth
     * @type {number}
     */
    clientWidth: number;
    /**
     * clientHeight
     * @type {number}
     */
    clientHeight: number;
    /**
     * scrollWidth
     * @type {number}
     */
    scrollWidth: number;
    /**
     * scrollHeight
     * @type {number}
     */
    scrollHeight: number;
}
/**
 * Simple helper service to return Layout dimensions
 * Depending of current Layout scroll mode (default or `withScroll` when scroll is moved to an element
 * inside of the layout) corresponding dimensions will be returns  - of `documentElement` in first case and
 * `.scrollable-container` in the second.
 */
export declare class NbLayoutRulerService {
    private contentDimensionsReq$;
    /**
     * Content dimensions
     * @returns {Observable<NbLayoutDimensions>}
     */
    getDimensions(): Observable<NbLayoutDimensions>;
    /**
     * @private
     * @returns {Subject<any>}
     */
    onGetDimensions(): Subject<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbLayoutRulerService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbLayoutRulerService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZXIuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJydWxlci5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbi8qKlxuICogTGF5b3V0IGRpbWVuc2lvbnMgdHlwZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5iTGF5b3V0RGltZW5zaW9ucyB7XG4gICAgLyoqXG4gICAgICogY2xpZW50V2lkdGhcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIGNsaWVudFdpZHRoOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogY2xpZW50SGVpZ2h0XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBjbGllbnRIZWlnaHQ6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBzY3JvbGxXaWR0aFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgc2Nyb2xsV2lkdGg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBzY3JvbGxIZWlnaHRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHNjcm9sbEhlaWdodDogbnVtYmVyO1xufVxuLyoqXG4gKiBTaW1wbGUgaGVscGVyIHNlcnZpY2UgdG8gcmV0dXJuIExheW91dCBkaW1lbnNpb25zXG4gKiBEZXBlbmRpbmcgb2YgY3VycmVudCBMYXlvdXQgc2Nyb2xsIG1vZGUgKGRlZmF1bHQgb3IgYHdpdGhTY3JvbGxgIHdoZW4gc2Nyb2xsIGlzIG1vdmVkIHRvIGFuIGVsZW1lbnRcbiAqIGluc2lkZSBvZiB0aGUgbGF5b3V0KSBjb3JyZXNwb25kaW5nIGRpbWVuc2lvbnMgd2lsbCBiZSByZXR1cm5zICAtIG9mIGBkb2N1bWVudEVsZW1lbnRgIGluIGZpcnN0IGNhc2UgYW5kXG4gKiBgLnNjcm9sbGFibGUtY29udGFpbmVyYCBpbiB0aGUgc2Vjb25kLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYkxheW91dFJ1bGVyU2VydmljZSB7XG4gICAgcHJpdmF0ZSBjb250ZW50RGltZW5zaW9uc1JlcSQ7XG4gICAgLyoqXG4gICAgICogQ29udGVudCBkaW1lbnNpb25zXG4gICAgICogQHJldHVybnMge09ic2VydmFibGU8TmJMYXlvdXREaW1lbnNpb25zPn1cbiAgICAgKi9cbiAgICBnZXREaW1lbnNpb25zKCk6IE9ic2VydmFibGU8TmJMYXlvdXREaW1lbnNpb25zPjtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIHtTdWJqZWN0PGFueT59XG4gICAgICovXG4gICAgb25HZXREaW1lbnNpb25zKCk6IFN1YmplY3Q8YW55Pjtcbn1cbiJdfQ==