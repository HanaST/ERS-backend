import { InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
/**
 * Layout direction.
 * */
import * as ɵngcc0 from '@angular/core';
export declare enum NbLayoutDirection {
    LTR = "ltr",
    RTL = "rtl"
}
/**
 * Layout direction setting injection token.
 * */
export declare const NB_LAYOUT_DIRECTION: InjectionToken<NbLayoutDirection>;
/**
 * Layout Direction Service.
 * Allows to set or get layout direction and listen to its changes
 */
export declare class NbLayoutDirectionService {
    private direction;
    private $directionChange;
    constructor(direction?: NbLayoutDirection);
    /**
     * Returns true if layout direction set to left to right.
     * @returns boolean.
     * */
    isLtr(): boolean;
    /**
     * Returns true if layout direction set to right to left.
     * @returns boolean.
     * */
    isRtl(): boolean;
    /**
     * Returns current layout direction.
     * @returns NbLayoutDirection.
     * */
    getDirection(): NbLayoutDirection;
    /**
     * Sets layout direction
     * @param {NbLayoutDirection} direction
     */
    setDirection(direction: NbLayoutDirection): void;
    /**
     * Triggered when direction was changed.
     * @returns Observable<NbLayoutDirection>.
     */
    onDirectionChange(): Observable<NbLayoutDirection>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbLayoutDirectionService, [{ optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbLayoutDirectionService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aW9uLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZGlyZWN0aW9uLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5Q0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuLyoqXG4gKiBMYXlvdXQgZGlyZWN0aW9uLlxuICogKi9cbmV4cG9ydCBkZWNsYXJlIGVudW0gTmJMYXlvdXREaXJlY3Rpb24ge1xuICAgIExUUiA9IFwibHRyXCIsXG4gICAgUlRMID0gXCJydGxcIlxufVxuLyoqXG4gKiBMYXlvdXQgZGlyZWN0aW9uIHNldHRpbmcgaW5qZWN0aW9uIHRva2VuLlxuICogKi9cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IE5CX0xBWU9VVF9ESVJFQ1RJT046IEluamVjdGlvblRva2VuPE5iTGF5b3V0RGlyZWN0aW9uPjtcbi8qKlxuICogTGF5b3V0IERpcmVjdGlvbiBTZXJ2aWNlLlxuICogQWxsb3dzIHRvIHNldCBvciBnZXQgbGF5b3V0IGRpcmVjdGlvbiBhbmQgbGlzdGVuIHRvIGl0cyBjaGFuZ2VzXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iTGF5b3V0RGlyZWN0aW9uU2VydmljZSB7XG4gICAgcHJpdmF0ZSBkaXJlY3Rpb247XG4gICAgcHJpdmF0ZSAkZGlyZWN0aW9uQ2hhbmdlO1xuICAgIGNvbnN0cnVjdG9yKGRpcmVjdGlvbj86IE5iTGF5b3V0RGlyZWN0aW9uKTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgbGF5b3V0IGRpcmVjdGlvbiBzZXQgdG8gbGVmdCB0byByaWdodC5cbiAgICAgKiBAcmV0dXJucyBib29sZWFuLlxuICAgICAqICovXG4gICAgaXNMdHIoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgbGF5b3V0IGRpcmVjdGlvbiBzZXQgdG8gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyBib29sZWFuLlxuICAgICAqICovXG4gICAgaXNSdGwoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGN1cnJlbnQgbGF5b3V0IGRpcmVjdGlvbi5cbiAgICAgKiBAcmV0dXJucyBOYkxheW91dERpcmVjdGlvbi5cbiAgICAgKiAqL1xuICAgIGdldERpcmVjdGlvbigpOiBOYkxheW91dERpcmVjdGlvbjtcbiAgICAvKipcbiAgICAgKiBTZXRzIGxheW91dCBkaXJlY3Rpb25cbiAgICAgKiBAcGFyYW0ge05iTGF5b3V0RGlyZWN0aW9ufSBkaXJlY3Rpb25cbiAgICAgKi9cbiAgICBzZXREaXJlY3Rpb24oZGlyZWN0aW9uOiBOYkxheW91dERpcmVjdGlvbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIHdoZW4gZGlyZWN0aW9uIHdhcyBjaGFuZ2VkLlxuICAgICAqIEByZXR1cm5zIE9ic2VydmFibGU8TmJMYXlvdXREaXJlY3Rpb24+LlxuICAgICAqL1xuICAgIG9uRGlyZWN0aW9uQ2hhbmdlKCk6IE9ic2VydmFibGU8TmJMYXlvdXREaXJlY3Rpb24+O1xufVxuIl19