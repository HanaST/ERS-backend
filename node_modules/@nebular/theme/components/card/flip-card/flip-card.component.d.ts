/**
 *
 * Flip card example:
 * @stacked-example(Showcase, flip-card/flip-card-showcase.component)
 *
 * As a content Flip card accepts two instances of `nb-card` - for front and back sides.
 *
 * Basic flip card configuration:
 *
 * ```html
 * <nb-flip-card>
 *   <nb-card-front>
 *     <nb-card>
 *       <nb-card-body>
 *         Front
 *       </nb-card-body>
 *     </nb-card>
 *   </nb-card-front>
 *   <nb-card-back>
 *     <nb-card>
 *       <nb-card-body>
 *         Back
 *       </nb-card-body>
 *     </nb-card>
 *   </nb-card-back>
 * </nb-flip-card>
 * ```
 *
 * ### Installation
 *
 * Import `NbCardModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbCardModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Flip Card with header and footer:
 * @stacked-example(With Header & Footer, flip-card/flip-card-full.component.ts)
 *
 * Colored flip-cards could be simply configured by providing a `status` property:
 * @stacked-example(Colored Card, flip-card/flip-card-colors.component)
 *
 * It is also possible to assign an `accent` property for a slight card highlight
 * as well as combine it with `status`:
 * @stacked-example(Accent Card, flip-card/flip-card-accents.component)
 *
 * @additional-example(Multiple Sizes, flip-card/flip-card-sizes.component)
 *
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbFlipCardComponent {
    /**
     * Flip state
     * @type boolean
     */
    flipped: boolean;
    /**
     * Show/hide toggle button to be able to control toggle from your code
     * @type {boolean}
     */
    showToggleButton: boolean;
    toggle(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbFlipCardComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbFlipCardComponent, "nb-flip-card", never, { "flipped": "flipped"; "showToggleButton": "showToggleButton"; }, {}, never, ["nb-card-front", "nb-card-back"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxpcC1jYXJkLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJmbGlwLWNhcmQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdURBOzs7Ozs7Ozs7Ozs7OztBQVlBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogRmxpcCBjYXJkIGV4YW1wbGU6XG4gKiBAc3RhY2tlZC1leGFtcGxlKFNob3djYXNlLCBmbGlwLWNhcmQvZmxpcC1jYXJkLXNob3djYXNlLmNvbXBvbmVudClcbiAqXG4gKiBBcyBhIGNvbnRlbnQgRmxpcCBjYXJkIGFjY2VwdHMgdHdvIGluc3RhbmNlcyBvZiBgbmItY2FyZGAgLSBmb3IgZnJvbnQgYW5kIGJhY2sgc2lkZXMuXG4gKlxuICogQmFzaWMgZmxpcCBjYXJkIGNvbmZpZ3VyYXRpb246XG4gKlxuICogYGBgaHRtbFxuICogPG5iLWZsaXAtY2FyZD5cbiAqICAgPG5iLWNhcmQtZnJvbnQ+XG4gKiAgICAgPG5iLWNhcmQ+XG4gKiAgICAgICA8bmItY2FyZC1ib2R5PlxuICogICAgICAgICBGcm9udFxuICogICAgICAgPC9uYi1jYXJkLWJvZHk+XG4gKiAgICAgPC9uYi1jYXJkPlxuICogICA8L25iLWNhcmQtZnJvbnQ+XG4gKiAgIDxuYi1jYXJkLWJhY2s+XG4gKiAgICAgPG5iLWNhcmQ+XG4gKiAgICAgICA8bmItY2FyZC1ib2R5PlxuICogICAgICAgICBCYWNrXG4gKiAgICAgICA8L25iLWNhcmQtYm9keT5cbiAqICAgICA8L25iLWNhcmQ+XG4gKiAgIDwvbmItY2FyZC1iYWNrPlxuICogPC9uYi1mbGlwLWNhcmQ+XG4gKiBgYGBcbiAqXG4gKiAjIyMgSW5zdGFsbGF0aW9uXG4gKlxuICogSW1wb3J0IGBOYkNhcmRNb2R1bGVgIHRvIHlvdXIgZmVhdHVyZSBtb2R1bGUuXG4gKiBgYGB0c1xuICogQE5nTW9kdWxlKHtcbiAqICAgaW1wb3J0czogW1xuICogICAgIC8vIC4uLlxuICogICAgIE5iQ2FyZE1vZHVsZSxcbiAqICAgXSxcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgUGFnZU1vZHVsZSB7IH1cbiAqIGBgYFxuICogIyMjIFVzYWdlXG4gKlxuICogRmxpcCBDYXJkIHdpdGggaGVhZGVyIGFuZCBmb290ZXI6XG4gKiBAc3RhY2tlZC1leGFtcGxlKFdpdGggSGVhZGVyICYgRm9vdGVyLCBmbGlwLWNhcmQvZmxpcC1jYXJkLWZ1bGwuY29tcG9uZW50LnRzKVxuICpcbiAqIENvbG9yZWQgZmxpcC1jYXJkcyBjb3VsZCBiZSBzaW1wbHkgY29uZmlndXJlZCBieSBwcm92aWRpbmcgYSBgc3RhdHVzYCBwcm9wZXJ0eTpcbiAqIEBzdGFja2VkLWV4YW1wbGUoQ29sb3JlZCBDYXJkLCBmbGlwLWNhcmQvZmxpcC1jYXJkLWNvbG9ycy5jb21wb25lbnQpXG4gKlxuICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBhc3NpZ24gYW4gYGFjY2VudGAgcHJvcGVydHkgZm9yIGEgc2xpZ2h0IGNhcmQgaGlnaGxpZ2h0XG4gKiBhcyB3ZWxsIGFzIGNvbWJpbmUgaXQgd2l0aCBgc3RhdHVzYDpcbiAqIEBzdGFja2VkLWV4YW1wbGUoQWNjZW50IENhcmQsIGZsaXAtY2FyZC9mbGlwLWNhcmQtYWNjZW50cy5jb21wb25lbnQpXG4gKlxuICogQGFkZGl0aW9uYWwtZXhhbXBsZShNdWx0aXBsZSBTaXplcywgZmxpcC1jYXJkL2ZsaXAtY2FyZC1zaXplcy5jb21wb25lbnQpXG4gKlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYkZsaXBDYXJkQ29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBGbGlwIHN0YXRlXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqL1xuICAgIGZsaXBwZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2hvdy9oaWRlIHRvZ2dsZSBidXR0b24gdG8gYmUgYWJsZSB0byBjb250cm9sIHRvZ2dsZSBmcm9tIHlvdXIgY29kZVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHNob3dUb2dnbGVCdXR0b246IGJvb2xlYW47XG4gICAgdG9nZ2xlKCk6IHZvaWQ7XG59XG4iXX0=