import { ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, EmbeddedViewRef, Injector, ViewContainerRef } from '@angular/core';
import { NbPosition } from './overlay-position';
import { NbComponentPortal, NbPortalInjector, NbPortalOutletDirective, NbTemplatePortal } from './mapping';
import * as ɵngcc0 from '@angular/core';
export interface NbRenderableContainer {
    /**
     * A renderContent method renders content with provided context.
     * Naturally, this job has to be done by ngOnChanges lifecycle hook, but
     * ngOnChanges hook will be triggered only if we update content or context properties
     * through template property binding syntax. But in our case we're updating these properties programmatically.
     * */
    renderContent(): any;
}
export declare class NbPositionedContainer {
    position: NbPosition;
    get top(): boolean;
    get topStart(): boolean;
    get topEnd(): boolean;
    get right(): boolean;
    get endTop(): boolean;
    get endBottom(): boolean;
    get bottom(): boolean;
    get bottomStart(): boolean;
    get bottomEnd(): boolean;
    get left(): boolean;
    get startTop(): boolean;
    get startBottom(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbPositionedContainer, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbPositionedContainer, "ng-component", never, { "position": "position"; }, {}, never, never>;
}
export declare class NbOverlayContainerComponent {
    protected vcr: ViewContainerRef;
    protected injector: Injector;
    private changeDetectorRef;
    portalOutlet: NbPortalOutletDirective;
    isAttached: boolean;
    content: string;
    constructor(vcr: ViewContainerRef, injector: Injector, changeDetectorRef: ChangeDetectorRef);
    get isStringContent(): boolean;
    attachComponentPortal<T>(portal: NbComponentPortal<T>, context?: Object): ComponentRef<T>;
    attachTemplatePortal<C>(portal: NbTemplatePortal<C>): EmbeddedViewRef<C>;
    attachStringContent(content: string): void;
    detach(): void;
    protected createChildInjector(cfr: ComponentFactoryResolver): NbPortalInjector;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbOverlayContainerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbOverlayContainerComponent, "nb-overlay-container", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS1jb250YWluZXIuZC50cyIsInNvdXJjZXMiOlsib3ZlcmxheS1jb250YWluZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBOzs7Ozs7Ozs7Ozs7Ozs7OztBQWVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ29tcG9uZW50UmVmLCBFbWJlZGRlZFZpZXdSZWYsIEluamVjdG9yLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYlBvc2l0aW9uIH0gZnJvbSAnLi9vdmVybGF5LXBvc2l0aW9uJztcbmltcG9ydCB7IE5iQ29tcG9uZW50UG9ydGFsLCBOYlBvcnRhbEluamVjdG9yLCBOYlBvcnRhbE91dGxldERpcmVjdGl2ZSwgTmJUZW1wbGF0ZVBvcnRhbCB9IGZyb20gJy4vbWFwcGluZyc7XG5leHBvcnQgaW50ZXJmYWNlIE5iUmVuZGVyYWJsZUNvbnRhaW5lciB7XG4gICAgLyoqXG4gICAgICogQSByZW5kZXJDb250ZW50IG1ldGhvZCByZW5kZXJzIGNvbnRlbnQgd2l0aCBwcm92aWRlZCBjb250ZXh0LlxuICAgICAqIE5hdHVyYWxseSwgdGhpcyBqb2IgaGFzIHRvIGJlIGRvbmUgYnkgbmdPbkNoYW5nZXMgbGlmZWN5Y2xlIGhvb2ssIGJ1dFxuICAgICAqIG5nT25DaGFuZ2VzIGhvb2sgd2lsbCBiZSB0cmlnZ2VyZWQgb25seSBpZiB3ZSB1cGRhdGUgY29udGVudCBvciBjb250ZXh0IHByb3BlcnRpZXNcbiAgICAgKiB0aHJvdWdoIHRlbXBsYXRlIHByb3BlcnR5IGJpbmRpbmcgc3ludGF4LiBCdXQgaW4gb3VyIGNhc2Ugd2UncmUgdXBkYXRpbmcgdGhlc2UgcHJvcGVydGllcyBwcm9ncmFtbWF0aWNhbGx5LlxuICAgICAqICovXG4gICAgcmVuZGVyQ29udGVudCgpOiBhbnk7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYlBvc2l0aW9uZWRDb250YWluZXIge1xuICAgIHBvc2l0aW9uOiBOYlBvc2l0aW9uO1xuICAgIGdldCB0b3AoKTogYm9vbGVhbjtcbiAgICBnZXQgdG9wU3RhcnQoKTogYm9vbGVhbjtcbiAgICBnZXQgdG9wRW5kKCk6IGJvb2xlYW47XG4gICAgZ2V0IHJpZ2h0KCk6IGJvb2xlYW47XG4gICAgZ2V0IGVuZFRvcCgpOiBib29sZWFuO1xuICAgIGdldCBlbmRCb3R0b20oKTogYm9vbGVhbjtcbiAgICBnZXQgYm90dG9tKCk6IGJvb2xlYW47XG4gICAgZ2V0IGJvdHRvbVN0YXJ0KCk6IGJvb2xlYW47XG4gICAgZ2V0IGJvdHRvbUVuZCgpOiBib29sZWFuO1xuICAgIGdldCBsZWZ0KCk6IGJvb2xlYW47XG4gICAgZ2V0IHN0YXJ0VG9wKCk6IGJvb2xlYW47XG4gICAgZ2V0IHN0YXJ0Qm90dG9tKCk6IGJvb2xlYW47XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYk92ZXJsYXlDb250YWluZXJDb21wb25lbnQge1xuICAgIHByb3RlY3RlZCB2Y3I6IFZpZXdDb250YWluZXJSZWY7XG4gICAgcHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3RvcjtcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmO1xuICAgIHBvcnRhbE91dGxldDogTmJQb3J0YWxPdXRsZXREaXJlY3RpdmU7XG4gICAgaXNBdHRhY2hlZDogYm9vbGVhbjtcbiAgICBjb250ZW50OiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IodmNyOiBWaWV3Q29udGFpbmVyUmVmLCBpbmplY3RvcjogSW5qZWN0b3IsIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgZ2V0IGlzU3RyaW5nQ29udGVudCgpOiBib29sZWFuO1xuICAgIGF0dGFjaENvbXBvbmVudFBvcnRhbDxUPihwb3J0YWw6IE5iQ29tcG9uZW50UG9ydGFsPFQ+LCBjb250ZXh0PzogT2JqZWN0KTogQ29tcG9uZW50UmVmPFQ+O1xuICAgIGF0dGFjaFRlbXBsYXRlUG9ydGFsPEM+KHBvcnRhbDogTmJUZW1wbGF0ZVBvcnRhbDxDPik6IEVtYmVkZGVkVmlld1JlZjxDPjtcbiAgICBhdHRhY2hTdHJpbmdDb250ZW50KGNvbnRlbnQ6IHN0cmluZyk6IHZvaWQ7XG4gICAgZGV0YWNoKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGNyZWF0ZUNoaWxkSW5qZWN0b3IoY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpOiBOYlBvcnRhbEluamVjdG9yO1xufVxuIl19