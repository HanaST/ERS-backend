import { NgZone } from '@angular/core';
import { BlockScrollStrategy, ScrollDispatcher, ScrollStrategyOptions } from '@angular/cdk/overlay';
import { NbLayoutScrollService } from '../../../services/scroll.service';
import { NbViewportRulerAdapter } from './viewport-ruler-adapter';
/**
 * Overrides default block scroll strategy because default strategy blocks scrolling on the body only.
 * But Nebular has its own scrollable container - nb-layout. So, we need to block scrolling in it to.
 * */
import * as ɵngcc0 from '@angular/core';
export declare class NbBlockScrollStrategyAdapter extends BlockScrollStrategy {
    protected scrollService: NbLayoutScrollService;
    constructor(document: any, viewportRuler: NbViewportRulerAdapter, scrollService: NbLayoutScrollService);
    enable(): void;
    disable(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbBlockScrollStrategyAdapter, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbBlockScrollStrategyAdapter>;
}
export declare class NbScrollStrategyOptions extends ScrollStrategyOptions {
    protected scrollService: NbLayoutScrollService;
    protected scrollDispatcher: ScrollDispatcher;
    protected viewportRuler: NbViewportRulerAdapter;
    protected ngZone: NgZone;
    protected document: any;
    constructor(scrollService: NbLayoutScrollService, scrollDispatcher: ScrollDispatcher, viewportRuler: NbViewportRulerAdapter, ngZone: NgZone, document: any);
    block: () => NbBlockScrollStrategyAdapter;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbScrollStrategyOptions, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbScrollStrategyOptions>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stc2Nyb2xsLXN0cmF0ZWd5LWFkYXB0ZXIuZC50cyIsInNvdXJjZXMiOlsiYmxvY2stc2Nyb2xsLXN0cmF0ZWd5LWFkYXB0ZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7QUFTQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmxvY2tTY3JvbGxTdHJhdGVneSwgU2Nyb2xsRGlzcGF0Y2hlciwgU2Nyb2xsU3RyYXRlZ3lPcHRpb25zIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgTmJMYXlvdXRTY3JvbGxTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvc2Nyb2xsLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmJWaWV3cG9ydFJ1bGVyQWRhcHRlciB9IGZyb20gJy4vdmlld3BvcnQtcnVsZXItYWRhcHRlcic7XG4vKipcbiAqIE92ZXJyaWRlcyBkZWZhdWx0IGJsb2NrIHNjcm9sbCBzdHJhdGVneSBiZWNhdXNlIGRlZmF1bHQgc3RyYXRlZ3kgYmxvY2tzIHNjcm9sbGluZyBvbiB0aGUgYm9keSBvbmx5LlxuICogQnV0IE5lYnVsYXIgaGFzIGl0cyBvd24gc2Nyb2xsYWJsZSBjb250YWluZXIgLSBuYi1sYXlvdXQuIFNvLCB3ZSBuZWVkIHRvIGJsb2NrIHNjcm9sbGluZyBpbiBpdCB0by5cbiAqICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYkJsb2NrU2Nyb2xsU3RyYXRlZ3lBZGFwdGVyIGV4dGVuZHMgQmxvY2tTY3JvbGxTdHJhdGVneSB7XG4gICAgcHJvdGVjdGVkIHNjcm9sbFNlcnZpY2U6IE5iTGF5b3V0U2Nyb2xsU2VydmljZTtcbiAgICBjb25zdHJ1Y3Rvcihkb2N1bWVudDogYW55LCB2aWV3cG9ydFJ1bGVyOiBOYlZpZXdwb3J0UnVsZXJBZGFwdGVyLCBzY3JvbGxTZXJ2aWNlOiBOYkxheW91dFNjcm9sbFNlcnZpY2UpO1xuICAgIGVuYWJsZSgpOiB2b2lkO1xuICAgIGRpc2FibGUoKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iU2Nyb2xsU3RyYXRlZ3lPcHRpb25zIGV4dGVuZHMgU2Nyb2xsU3RyYXRlZ3lPcHRpb25zIHtcbiAgICBwcm90ZWN0ZWQgc2Nyb2xsU2VydmljZTogTmJMYXlvdXRTY3JvbGxTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBzY3JvbGxEaXNwYXRjaGVyOiBTY3JvbGxEaXNwYXRjaGVyO1xuICAgIHByb3RlY3RlZCB2aWV3cG9ydFJ1bGVyOiBOYlZpZXdwb3J0UnVsZXJBZGFwdGVyO1xuICAgIHByb3RlY3RlZCBuZ1pvbmU6IE5nWm9uZTtcbiAgICBwcm90ZWN0ZWQgZG9jdW1lbnQ6IGFueTtcbiAgICBjb25zdHJ1Y3RvcihzY3JvbGxTZXJ2aWNlOiBOYkxheW91dFNjcm9sbFNlcnZpY2UsIHNjcm9sbERpc3BhdGNoZXI6IFNjcm9sbERpc3BhdGNoZXIsIHZpZXdwb3J0UnVsZXI6IE5iVmlld3BvcnRSdWxlckFkYXB0ZXIsIG5nWm9uZTogTmdab25lLCBkb2N1bWVudDogYW55KTtcbiAgICBibG9jazogKCkgPT4gTmJCbG9ja1Njcm9sbFN0cmF0ZWd5QWRhcHRlcjtcbn1cbiJdfQ==