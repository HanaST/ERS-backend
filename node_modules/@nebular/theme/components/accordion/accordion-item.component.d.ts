/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { ChangeDetectorRef, EventEmitter, SimpleChanges, OnInit, OnChanges, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
import { NbAccordionComponent } from './accordion.component';
import { NbBooleanInput } from '../helpers';
/**
 * Component intended to be used within `<nb-accordion>` component
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbAccordionItemComponent implements OnInit, OnChanges, OnDestroy {
    private accordion;
    private cd;
    /**
     * Item is collapse (`true` by default)
     * @type {boolean}
     */
    get collapsed(): boolean;
    set collapsed(val: boolean);
    static ngAcceptInputType_collapsed: NbBooleanInput;
    /**
     * Item is expanded (`false` by default)
     * @type {boolean}
     */
    get expanded(): boolean;
    set expanded(val: boolean);
    static ngAcceptInputType_expanded: NbBooleanInput;
    /**
     * Item is disabled and cannot be opened.
     * @type {boolean}
     */
    get disabled(): boolean;
    set disabled(val: boolean);
    static ngAcceptInputType_disabled: NbBooleanInput;
    /**
     * Emits whenever the expanded state of the accordion changes.
     * Primarily used to facilitate two-way binding.
     */
    collapsedChange: EventEmitter<boolean>;
    accordionItemInvalidate: Subject<boolean>;
    private collapsedValue;
    private disabledValue;
    private destroy$;
    constructor(accordion: NbAccordionComponent, cd: ChangeDetectorRef);
    /**
     * Open/close the item
     */
    toggle(): void;
    /**
     * Open the item.
     */
    open(): void;
    /**
     * Collapse the item.
     */
    close(): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private invalidate;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbAccordionItemComponent, [{ host: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbAccordionItemComponent, "nb-accordion-item", never, { "collapsed": "collapsed"; "expanded": "expanded"; "disabled": "disabled"; }, { "collapsedChange": "collapsedChange"; }, never, ["nb-accordion-item-header", "nb-accordion-item-body"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLWl0ZW0uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImFjY29yZGlvbi1pdGVtLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrREEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRXZlbnRFbWl0dGVyLCBTaW1wbGVDaGFuZ2VzLCBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOYkFjY29yZGlvbkNvbXBvbmVudCB9IGZyb20gJy4vYWNjb3JkaW9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOYkJvb2xlYW5JbnB1dCB9IGZyb20gJy4uL2hlbHBlcnMnO1xuLyoqXG4gKiBDb21wb25lbnQgaW50ZW5kZWQgdG8gYmUgdXNlZCB3aXRoaW4gYDxuYi1hY2NvcmRpb24+YCBjb21wb25lbnRcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJBY2NvcmRpb25JdGVtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBhY2NvcmRpb247XG4gICAgcHJpdmF0ZSBjZDtcbiAgICAvKipcbiAgICAgKiBJdGVtIGlzIGNvbGxhcHNlIChgdHJ1ZWAgYnkgZGVmYXVsdClcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBnZXQgY29sbGFwc2VkKCk6IGJvb2xlYW47XG4gICAgc2V0IGNvbGxhcHNlZCh2YWw6IGJvb2xlYW4pO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9jb2xsYXBzZWQ6IE5iQm9vbGVhbklucHV0O1xuICAgIC8qKlxuICAgICAqIEl0ZW0gaXMgZXhwYW5kZWQgKGBmYWxzZWAgYnkgZGVmYXVsdClcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBnZXQgZXhwYW5kZWQoKTogYm9vbGVhbjtcbiAgICBzZXQgZXhwYW5kZWQodmFsOiBib29sZWFuKTtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfZXhwYW5kZWQ6IE5iQm9vbGVhbklucHV0O1xuICAgIC8qKlxuICAgICAqIEl0ZW0gaXMgZGlzYWJsZWQgYW5kIGNhbm5vdCBiZSBvcGVuZWQuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgc2V0IGRpc2FibGVkKHZhbDogYm9vbGVhbik7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX2Rpc2FibGVkOiBOYkJvb2xlYW5JbnB1dDtcbiAgICAvKipcbiAgICAgKiBFbWl0cyB3aGVuZXZlciB0aGUgZXhwYW5kZWQgc3RhdGUgb2YgdGhlIGFjY29yZGlvbiBjaGFuZ2VzLlxuICAgICAqIFByaW1hcmlseSB1c2VkIHRvIGZhY2lsaXRhdGUgdHdvLXdheSBiaW5kaW5nLlxuICAgICAqL1xuICAgIGNvbGxhcHNlZENoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIGFjY29yZGlvbkl0ZW1JbnZhbGlkYXRlOiBTdWJqZWN0PGJvb2xlYW4+O1xuICAgIHByaXZhdGUgY29sbGFwc2VkVmFsdWU7XG4gICAgcHJpdmF0ZSBkaXNhYmxlZFZhbHVlO1xuICAgIHByaXZhdGUgZGVzdHJveSQ7XG4gICAgY29uc3RydWN0b3IoYWNjb3JkaW9uOiBOYkFjY29yZGlvbkNvbXBvbmVudCwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICAvKipcbiAgICAgKiBPcGVuL2Nsb3NlIHRoZSBpdGVtXG4gICAgICovXG4gICAgdG9nZ2xlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogT3BlbiB0aGUgaXRlbS5cbiAgICAgKi9cbiAgICBvcGVuKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ29sbGFwc2UgdGhlIGl0ZW0uXG4gICAgICovXG4gICAgY2xvc2UoKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBpbnZhbGlkYXRlO1xufVxuIl19