import { ComponentFactoryResolver, ComponentRef, TemplateRef, ViewContainerRef } from '@angular/core';
import { NbComponentType, NbOverlayPositionBuilder, NbOverlayRef } from '../cdk/overlay/mapping';
import { NbOverlayService } from '../cdk/overlay/overlay-service';
import { NbBlockScrollStrategyAdapter } from '../cdk/adapter/block-scroll-strategy-adapter';
import { NbWindowConfig } from './window.options';
import { NbWindowRef } from './window-ref';
import { NbWindowComponent } from './window.component';
/**
 * The `NbWindowService` can be used to open windows.
 *
 * @stacked-example(Showcase, window/window-showcase.component)
 *
 * ### Installation
 *
 * Import `NbWindowModule` to your app module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbWindowModule.forRoot(config),
 *   ],
 * })
 * export class AppModule { }
 * ```
 *
 * If you are using it in a lazy loaded module than you have to install `NbWindowModule.forChild`:
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbWindowModule.forChild(config),
 *   ],
 * })
 * export class LazyLoadedModule { }
 * ```
 *
 * ### Usage
 *
 * A new window can be opened by calling the `open` method with a component or template to be loaded
 * and an optional configuration.
 * `open` method will return `NbWindowRef` that can be used for the further manipulations.
 *
 * ```ts
 * const windowRef = this.windowService.open(MyComponent, { ... });
 * ```
 *
 * `NbWindowRef` gives you ability manipulate opened window.
 * Also, you can inject `NbWindowRef` inside provided component which rendered in window.
 *
 * ```ts
 * this.windowService.open(MyWindowComponent, { ... });
 *
 * // my.component.ts
 * constructor(protected windowRef: NbWindowRef) {
 * }
 *
 * minimize() {
 *   this.windowRef.minimize();
 * }
 *
 * close() {
 *   this.windowRef.close();
 * }
 * ```
 *
 * Instead of component you can create window from TemplateRef. As usual you can access context provided via config
 * via `let-` variables. Also you can get reference to the `NbWindowRef` in context's `windowRef` property.
 *
 * @stacked-example(Window content from TemplateRef, window/template-window.component)
 *
 * ### Configuration
 *
 * As mentioned above, `open` method of the `NbWindowService` may receive optional configuration options.
 * Also, you can modify default windows configuration through `NbWindowModule.forRoot({ ... })`.
 * You can read about all available options on [API tab](docs/components/window/api#nbwindowconfig).
 *
 * @stacked-example(Configuration, window/windows-backdrop.component)
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbWindowService {
    protected componentFactoryResolver: ComponentFactoryResolver;
    protected overlayService: NbOverlayService;
    protected overlayPositionBuilder: NbOverlayPositionBuilder;
    protected blockScrollStrategy: NbBlockScrollStrategyAdapter;
    protected readonly defaultWindowsConfig: NbWindowConfig;
    protected cfr: ComponentFactoryResolver;
    protected document: Document;
    protected overlayRef: NbOverlayRef;
    protected windowsContainerViewRef: ViewContainerRef;
    protected openWindows: NbWindowRef[];
    constructor(componentFactoryResolver: ComponentFactoryResolver, overlayService: NbOverlayService, overlayPositionBuilder: NbOverlayPositionBuilder, blockScrollStrategy: NbBlockScrollStrategyAdapter, defaultWindowsConfig: NbWindowConfig, cfr: ComponentFactoryResolver, document: any);
    /**
     * Opens new window.
     * @param windowContent
     * @param windowConfig
     * */
    open(windowContent: TemplateRef<any> | NbComponentType, windowConfig?: Partial<NbWindowConfig>): NbWindowRef;
    protected shouldCreateWindowsContainer(): boolean;
    protected createWindowsContainer(): void;
    protected appendWindow(content: TemplateRef<any> | NbComponentType, config: NbWindowConfig, windowRef: NbWindowRef): ComponentRef<NbWindowComponent>;
    protected subscribeToEvents(windowRef: NbWindowRef): void;
    protected checkAndUpdateOverlay(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbWindowService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbWindowService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsid2luZG93LnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQThFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ29tcG9uZW50UmVmLCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmJDb21wb25lbnRUeXBlLCBOYk92ZXJsYXlQb3NpdGlvbkJ1aWxkZXIsIE5iT3ZlcmxheVJlZiB9IGZyb20gJy4uL2Nkay9vdmVybGF5L21hcHBpbmcnO1xuaW1wb3J0IHsgTmJPdmVybGF5U2VydmljZSB9IGZyb20gJy4uL2Nkay9vdmVybGF5L292ZXJsYXktc2VydmljZSc7XG5pbXBvcnQgeyBOYkJsb2NrU2Nyb2xsU3RyYXRlZ3lBZGFwdGVyIH0gZnJvbSAnLi4vY2RrL2FkYXB0ZXIvYmxvY2stc2Nyb2xsLXN0cmF0ZWd5LWFkYXB0ZXInO1xuaW1wb3J0IHsgTmJXaW5kb3dDb25maWcgfSBmcm9tICcuL3dpbmRvdy5vcHRpb25zJztcbmltcG9ydCB7IE5iV2luZG93UmVmIH0gZnJvbSAnLi93aW5kb3ctcmVmJztcbmltcG9ydCB7IE5iV2luZG93Q29tcG9uZW50IH0gZnJvbSAnLi93aW5kb3cuY29tcG9uZW50Jztcbi8qKlxuICogVGhlIGBOYldpbmRvd1NlcnZpY2VgIGNhbiBiZSB1c2VkIHRvIG9wZW4gd2luZG93cy5cbiAqXG4gKiBAc3RhY2tlZC1leGFtcGxlKFNob3djYXNlLCB3aW5kb3cvd2luZG93LXNob3djYXNlLmNvbXBvbmVudClcbiAqXG4gKiAjIyMgSW5zdGFsbGF0aW9uXG4gKlxuICogSW1wb3J0IGBOYldpbmRvd01vZHVsZWAgdG8geW91ciBhcHAgbW9kdWxlLlxuICogYGBgdHNcbiAqIEBOZ01vZHVsZSh7XG4gKiAgIGltcG9ydHM6IFtcbiAqICAgICAvLyAuLi5cbiAqICAgICBOYldpbmRvd01vZHVsZS5mb3JSb290KGNvbmZpZyksXG4gKiAgIF0sXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcE1vZHVsZSB7IH1cbiAqIGBgYFxuICpcbiAqIElmIHlvdSBhcmUgdXNpbmcgaXQgaW4gYSBsYXp5IGxvYWRlZCBtb2R1bGUgdGhhbiB5b3UgaGF2ZSB0byBpbnN0YWxsIGBOYldpbmRvd01vZHVsZS5mb3JDaGlsZGA6XG4gKiBgYGB0c1xuICogQE5nTW9kdWxlKHtcbiAqICAgaW1wb3J0czogW1xuICogICAgIC8vIC4uLlxuICogICAgIE5iV2luZG93TW9kdWxlLmZvckNoaWxkKGNvbmZpZyksXG4gKiAgIF0sXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIExhenlMb2FkZWRNb2R1bGUgeyB9XG4gKiBgYGBcbiAqXG4gKiAjIyMgVXNhZ2VcbiAqXG4gKiBBIG5ldyB3aW5kb3cgY2FuIGJlIG9wZW5lZCBieSBjYWxsaW5nIHRoZSBgb3BlbmAgbWV0aG9kIHdpdGggYSBjb21wb25lbnQgb3IgdGVtcGxhdGUgdG8gYmUgbG9hZGVkXG4gKiBhbmQgYW4gb3B0aW9uYWwgY29uZmlndXJhdGlvbi5cbiAqIGBvcGVuYCBtZXRob2Qgd2lsbCByZXR1cm4gYE5iV2luZG93UmVmYCB0aGF0IGNhbiBiZSB1c2VkIGZvciB0aGUgZnVydGhlciBtYW5pcHVsYXRpb25zLlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCB3aW5kb3dSZWYgPSB0aGlzLndpbmRvd1NlcnZpY2Uub3BlbihNeUNvbXBvbmVudCwgeyAuLi4gfSk7XG4gKiBgYGBcbiAqXG4gKiBgTmJXaW5kb3dSZWZgIGdpdmVzIHlvdSBhYmlsaXR5IG1hbmlwdWxhdGUgb3BlbmVkIHdpbmRvdy5cbiAqIEFsc28sIHlvdSBjYW4gaW5qZWN0IGBOYldpbmRvd1JlZmAgaW5zaWRlIHByb3ZpZGVkIGNvbXBvbmVudCB3aGljaCByZW5kZXJlZCBpbiB3aW5kb3cuXG4gKlxuICogYGBgdHNcbiAqIHRoaXMud2luZG93U2VydmljZS5vcGVuKE15V2luZG93Q29tcG9uZW50LCB7IC4uLiB9KTtcbiAqXG4gKiAvLyBteS5jb21wb25lbnQudHNcbiAqIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB3aW5kb3dSZWY6IE5iV2luZG93UmVmKSB7XG4gKiB9XG4gKlxuICogbWluaW1pemUoKSB7XG4gKiAgIHRoaXMud2luZG93UmVmLm1pbmltaXplKCk7XG4gKiB9XG4gKlxuICogY2xvc2UoKSB7XG4gKiAgIHRoaXMud2luZG93UmVmLmNsb3NlKCk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBJbnN0ZWFkIG9mIGNvbXBvbmVudCB5b3UgY2FuIGNyZWF0ZSB3aW5kb3cgZnJvbSBUZW1wbGF0ZVJlZi4gQXMgdXN1YWwgeW91IGNhbiBhY2Nlc3MgY29udGV4dCBwcm92aWRlZCB2aWEgY29uZmlnXG4gKiB2aWEgYGxldC1gIHZhcmlhYmxlcy4gQWxzbyB5b3UgY2FuIGdldCByZWZlcmVuY2UgdG8gdGhlIGBOYldpbmRvd1JlZmAgaW4gY29udGV4dCdzIGB3aW5kb3dSZWZgIHByb3BlcnR5LlxuICpcbiAqIEBzdGFja2VkLWV4YW1wbGUoV2luZG93IGNvbnRlbnQgZnJvbSBUZW1wbGF0ZVJlZiwgd2luZG93L3RlbXBsYXRlLXdpbmRvdy5jb21wb25lbnQpXG4gKlxuICogIyMjIENvbmZpZ3VyYXRpb25cbiAqXG4gKiBBcyBtZW50aW9uZWQgYWJvdmUsIGBvcGVuYCBtZXRob2Qgb2YgdGhlIGBOYldpbmRvd1NlcnZpY2VgIG1heSByZWNlaXZlIG9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cbiAqIEFsc28sIHlvdSBjYW4gbW9kaWZ5IGRlZmF1bHQgd2luZG93cyBjb25maWd1cmF0aW9uIHRocm91Z2ggYE5iV2luZG93TW9kdWxlLmZvclJvb3QoeyAuLi4gfSlgLlxuICogWW91IGNhbiByZWFkIGFib3V0IGFsbCBhdmFpbGFibGUgb3B0aW9ucyBvbiBbQVBJIHRhYl0oZG9jcy9jb21wb25lbnRzL3dpbmRvdy9hcGkjbmJ3aW5kb3djb25maWcpLlxuICpcbiAqIEBzdGFja2VkLWV4YW1wbGUoQ29uZmlndXJhdGlvbiwgd2luZG93L3dpbmRvd3MtYmFja2Ryb3AuY29tcG9uZW50KVxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYldpbmRvd1NlcnZpY2Uge1xuICAgIHByb3RlY3RlZCBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcbiAgICBwcm90ZWN0ZWQgb3ZlcmxheVNlcnZpY2U6IE5iT3ZlcmxheVNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIG92ZXJsYXlQb3NpdGlvbkJ1aWxkZXI6IE5iT3ZlcmxheVBvc2l0aW9uQnVpbGRlcjtcbiAgICBwcm90ZWN0ZWQgYmxvY2tTY3JvbGxTdHJhdGVneTogTmJCbG9ja1Njcm9sbFN0cmF0ZWd5QWRhcHRlcjtcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZGVmYXVsdFdpbmRvd3NDb25maWc6IE5iV2luZG93Q29uZmlnO1xuICAgIHByb3RlY3RlZCBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcbiAgICBwcm90ZWN0ZWQgZG9jdW1lbnQ6IERvY3VtZW50O1xuICAgIHByb3RlY3RlZCBvdmVybGF5UmVmOiBOYk92ZXJsYXlSZWY7XG4gICAgcHJvdGVjdGVkIHdpbmRvd3NDb250YWluZXJWaWV3UmVmOiBWaWV3Q29udGFpbmVyUmVmO1xuICAgIHByb3RlY3RlZCBvcGVuV2luZG93czogTmJXaW5kb3dSZWZbXTtcbiAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgb3ZlcmxheVNlcnZpY2U6IE5iT3ZlcmxheVNlcnZpY2UsIG92ZXJsYXlQb3NpdGlvbkJ1aWxkZXI6IE5iT3ZlcmxheVBvc2l0aW9uQnVpbGRlciwgYmxvY2tTY3JvbGxTdHJhdGVneTogTmJCbG9ja1Njcm9sbFN0cmF0ZWd5QWRhcHRlciwgZGVmYXVsdFdpbmRvd3NDb25maWc6IE5iV2luZG93Q29uZmlnLCBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgZG9jdW1lbnQ6IGFueSk7XG4gICAgLyoqXG4gICAgICogT3BlbnMgbmV3IHdpbmRvdy5cbiAgICAgKiBAcGFyYW0gd2luZG93Q29udGVudFxuICAgICAqIEBwYXJhbSB3aW5kb3dDb25maWdcbiAgICAgKiAqL1xuICAgIG9wZW4od2luZG93Q29udGVudDogVGVtcGxhdGVSZWY8YW55PiB8IE5iQ29tcG9uZW50VHlwZSwgd2luZG93Q29uZmlnPzogUGFydGlhbDxOYldpbmRvd0NvbmZpZz4pOiBOYldpbmRvd1JlZjtcbiAgICBwcm90ZWN0ZWQgc2hvdWxkQ3JlYXRlV2luZG93c0NvbnRhaW5lcigpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBjcmVhdGVXaW5kb3dzQ29udGFpbmVyKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGFwcGVuZFdpbmRvdyhjb250ZW50OiBUZW1wbGF0ZVJlZjxhbnk+IHwgTmJDb21wb25lbnRUeXBlLCBjb25maWc6IE5iV2luZG93Q29uZmlnLCB3aW5kb3dSZWY6IE5iV2luZG93UmVmKTogQ29tcG9uZW50UmVmPE5iV2luZG93Q29tcG9uZW50PjtcbiAgICBwcm90ZWN0ZWQgc3Vic2NyaWJlVG9FdmVudHMod2luZG93UmVmOiBOYldpbmRvd1JlZik6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGNoZWNrQW5kVXBkYXRlT3ZlcmxheSgpOiB2b2lkO1xufVxuIl19