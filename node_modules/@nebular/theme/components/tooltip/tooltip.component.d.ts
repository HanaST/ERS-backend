import { NbComponentStatus } from '../component-status';
import { NbRenderableContainer } from '../cdk/overlay/overlay-container';
import { NbPosition } from '../cdk/overlay/overlay-position';
import { NbIconConfig } from '../icon/icon.component';
/**
 * Tooltip container.
 * Renders provided tooltip inside.
 *
 * @styles
 *
 * tooltip-background-color:
 * tooltip-border-color:
 * tooltip-border-style:
 * tooltip-border-width:
 * tooltip-border-radius:
 * tooltip-padding:
 * tooltip-text-color:
 * tooltip-text-font-family:
 * tooltip-text-font-size:
 * tooltip-text-font-weight:
 * tooltip-text-line-height:
 * tooltip-icon-height:
 * tooltip-icon-width:
 * tooltip-max-width:
 * tooltip-basic-background-color:
 * tooltip-basic-border-color:
 * tooltip-basic-text-color:
 * tooltip-primary-background-color:
 * tooltip-primary-border-color:
 * tooltip-primary-text-color:
 * tooltip-info-background-color:
 * tooltip-info-border-color:
 * tooltip-info-text-color:
 * tooltip-success-background-color:
 * tooltip-success-border-color:
 * tooltip-success-text-color:
 * tooltip-warning-background-color:
 * tooltip-warning-border-color:
 * tooltip-warning-text-color:
 * tooltip-danger-background-color:
 * tooltip-danger-border-color:
 * tooltip-danger-text-color:
 * tooltip-control-background-color:
 * tooltip-control-border-color:
 * tooltip-control-text-color:
 * tooltip-shadow:
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbTooltipComponent implements NbRenderableContainer {
    content: string;
    /**
     * Popover position relatively host element.
     * */
    position: NbPosition;
    get binding(): string;
    get show(): boolean;
    context: {
        icon?: string | NbIconConfig;
        status?: NbComponentStatus;
    };
    get statusClass(): string;
    /**
     * The method is empty since we don't need to do anything additionally
     * render is handled by change detection
     */
    renderContent(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbTooltipComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbTooltipComponent, "nb-tooltip", never, { "position": "position"; "context": "context"; "content": "content"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidG9vbHRpcC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBK0NBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5iQ29tcG9uZW50U3RhdHVzIH0gZnJvbSAnLi4vY29tcG9uZW50LXN0YXR1cyc7XG5pbXBvcnQgeyBOYlJlbmRlcmFibGVDb250YWluZXIgfSBmcm9tICcuLi9jZGsvb3ZlcmxheS9vdmVybGF5LWNvbnRhaW5lcic7XG5pbXBvcnQgeyBOYlBvc2l0aW9uIH0gZnJvbSAnLi4vY2RrL292ZXJsYXkvb3ZlcmxheS1wb3NpdGlvbic7XG5pbXBvcnQgeyBOYkljb25Db25maWcgfSBmcm9tICcuLi9pY29uL2ljb24uY29tcG9uZW50Jztcbi8qKlxuICogVG9vbHRpcCBjb250YWluZXIuXG4gKiBSZW5kZXJzIHByb3ZpZGVkIHRvb2x0aXAgaW5zaWRlLlxuICpcbiAqIEBzdHlsZXNcbiAqXG4gKiB0b29sdGlwLWJhY2tncm91bmQtY29sb3I6XG4gKiB0b29sdGlwLWJvcmRlci1jb2xvcjpcbiAqIHRvb2x0aXAtYm9yZGVyLXN0eWxlOlxuICogdG9vbHRpcC1ib3JkZXItd2lkdGg6XG4gKiB0b29sdGlwLWJvcmRlci1yYWRpdXM6XG4gKiB0b29sdGlwLXBhZGRpbmc6XG4gKiB0b29sdGlwLXRleHQtY29sb3I6XG4gKiB0b29sdGlwLXRleHQtZm9udC1mYW1pbHk6XG4gKiB0b29sdGlwLXRleHQtZm9udC1zaXplOlxuICogdG9vbHRpcC10ZXh0LWZvbnQtd2VpZ2h0OlxuICogdG9vbHRpcC10ZXh0LWxpbmUtaGVpZ2h0OlxuICogdG9vbHRpcC1pY29uLWhlaWdodDpcbiAqIHRvb2x0aXAtaWNvbi13aWR0aDpcbiAqIHRvb2x0aXAtbWF4LXdpZHRoOlxuICogdG9vbHRpcC1iYXNpYy1iYWNrZ3JvdW5kLWNvbG9yOlxuICogdG9vbHRpcC1iYXNpYy1ib3JkZXItY29sb3I6XG4gKiB0b29sdGlwLWJhc2ljLXRleHQtY29sb3I6XG4gKiB0b29sdGlwLXByaW1hcnktYmFja2dyb3VuZC1jb2xvcjpcbiAqIHRvb2x0aXAtcHJpbWFyeS1ib3JkZXItY29sb3I6XG4gKiB0b29sdGlwLXByaW1hcnktdGV4dC1jb2xvcjpcbiAqIHRvb2x0aXAtaW5mby1iYWNrZ3JvdW5kLWNvbG9yOlxuICogdG9vbHRpcC1pbmZvLWJvcmRlci1jb2xvcjpcbiAqIHRvb2x0aXAtaW5mby10ZXh0LWNvbG9yOlxuICogdG9vbHRpcC1zdWNjZXNzLWJhY2tncm91bmQtY29sb3I6XG4gKiB0b29sdGlwLXN1Y2Nlc3MtYm9yZGVyLWNvbG9yOlxuICogdG9vbHRpcC1zdWNjZXNzLXRleHQtY29sb3I6XG4gKiB0b29sdGlwLXdhcm5pbmctYmFja2dyb3VuZC1jb2xvcjpcbiAqIHRvb2x0aXAtd2FybmluZy1ib3JkZXItY29sb3I6XG4gKiB0b29sdGlwLXdhcm5pbmctdGV4dC1jb2xvcjpcbiAqIHRvb2x0aXAtZGFuZ2VyLWJhY2tncm91bmQtY29sb3I6XG4gKiB0b29sdGlwLWRhbmdlci1ib3JkZXItY29sb3I6XG4gKiB0b29sdGlwLWRhbmdlci10ZXh0LWNvbG9yOlxuICogdG9vbHRpcC1jb250cm9sLWJhY2tncm91bmQtY29sb3I6XG4gKiB0b29sdGlwLWNvbnRyb2wtYm9yZGVyLWNvbG9yOlxuICogdG9vbHRpcC1jb250cm9sLXRleHQtY29sb3I6XG4gKiB0b29sdGlwLXNoYWRvdzpcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJUb29sdGlwQ29tcG9uZW50IGltcGxlbWVudHMgTmJSZW5kZXJhYmxlQ29udGFpbmVyIHtcbiAgICBjb250ZW50OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogUG9wb3ZlciBwb3NpdGlvbiByZWxhdGl2ZWx5IGhvc3QgZWxlbWVudC5cbiAgICAgKiAqL1xuICAgIHBvc2l0aW9uOiBOYlBvc2l0aW9uO1xuICAgIGdldCBiaW5kaW5nKCk6IHN0cmluZztcbiAgICBnZXQgc2hvdygpOiBib29sZWFuO1xuICAgIGNvbnRleHQ6IHtcbiAgICAgICAgaWNvbj86IHN0cmluZyB8IE5iSWNvbkNvbmZpZztcbiAgICAgICAgc3RhdHVzPzogTmJDb21wb25lbnRTdGF0dXM7XG4gICAgfTtcbiAgICBnZXQgc3RhdHVzQ2xhc3MoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBtZXRob2QgaXMgZW1wdHkgc2luY2Ugd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZyBhZGRpdGlvbmFsbHlcbiAgICAgKiByZW5kZXIgaXMgaGFuZGxlZCBieSBjaGFuZ2UgZGV0ZWN0aW9uXG4gICAgICovXG4gICAgcmVuZGVyQ29udGVudCgpOiB2b2lkO1xufVxuIl19