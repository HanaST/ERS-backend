/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { DatePipe, TranslationWidth } from '@angular/common';
import { NbDateService } from './date.service';
/**
 * The `NbNativeDateService` is basic implementation of `NbDateService` using
 * native js date objects and angular localization services.
 * */
import * as ɵngcc0 from '@angular/core';
export declare class NbNativeDateService extends NbDateService<Date> {
    protected datePipe: DatePipe;
    constructor(locale: string);
    setLocale(locale: string): void;
    isValidDateString(date: string, format: string): boolean;
    today(): Date;
    getDate(date: Date): number;
    getMonth(date: Date): number;
    getYear(date: Date): number;
    getDayOfWeek(date: Date): number;
    /**
     * returns first day of the week, it can be 1 if week starts from monday
     * and 0 if from sunday and so on.
     * */
    getFirstDayOfWeek(): number;
    getMonthName(date: Date, style?: TranslationWidth): string;
    getMonthNameByIndex(index: number, style?: TranslationWidth): string;
    getDayOfWeekNames(): string[];
    format(date: Date, format: string): string;
    /**
     * We haven't got capability to parse date using formatting without third party libraries.
     * */
    parse(date: string, format: string): Date;
    addDay(date: Date, num: number): Date;
    addMonth(date: Date, num: number): Date;
    addYear(date: Date, num: number): Date;
    clone(date: Date): Date;
    compareDates(date1: Date, date2: Date): number;
    createDate(year: number, month: number, date: number): Date;
    getMonthEnd(date: Date): Date;
    getMonthStart(date: Date): Date;
    getNumberOfDaysInMonth(date: Date): number;
    getYearEnd(date: Date): Date;
    getYearStart(date: Date): Date;
    isSameDay(date1: Date, date2: Date): boolean;
    isSameMonth(date1: Date, date2: Date): boolean;
    isSameYear(date1: Date, date2: Date): boolean;
    getId(): string;
    getWeekNumber(date: Date): number;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbNativeDateService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbNativeDateService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLWRhdGUuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJuYXRpdmUtZGF0ZS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztBQVdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi9cbmltcG9ydCB7IERhdGVQaXBlLCBUcmFuc2xhdGlvbldpZHRoIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5iRGF0ZVNlcnZpY2UgfSBmcm9tICcuL2RhdGUuc2VydmljZSc7XG4vKipcbiAqIFRoZSBgTmJOYXRpdmVEYXRlU2VydmljZWAgaXMgYmFzaWMgaW1wbGVtZW50YXRpb24gb2YgYE5iRGF0ZVNlcnZpY2VgIHVzaW5nXG4gKiBuYXRpdmUganMgZGF0ZSBvYmplY3RzIGFuZCBhbmd1bGFyIGxvY2FsaXphdGlvbiBzZXJ2aWNlcy5cbiAqICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYk5hdGl2ZURhdGVTZXJ2aWNlIGV4dGVuZHMgTmJEYXRlU2VydmljZTxEYXRlPiB7XG4gICAgcHJvdGVjdGVkIGRhdGVQaXBlOiBEYXRlUGlwZTtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbGU6IHN0cmluZyk7XG4gICAgc2V0TG9jYWxlKGxvY2FsZTogc3RyaW5nKTogdm9pZDtcbiAgICBpc1ZhbGlkRGF0ZVN0cmluZyhkYXRlOiBzdHJpbmcsIGZvcm1hdDogc3RyaW5nKTogYm9vbGVhbjtcbiAgICB0b2RheSgpOiBEYXRlO1xuICAgIGdldERhdGUoZGF0ZTogRGF0ZSk6IG51bWJlcjtcbiAgICBnZXRNb250aChkYXRlOiBEYXRlKTogbnVtYmVyO1xuICAgIGdldFllYXIoZGF0ZTogRGF0ZSk6IG51bWJlcjtcbiAgICBnZXREYXlPZldlZWsoZGF0ZTogRGF0ZSk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiByZXR1cm5zIGZpcnN0IGRheSBvZiB0aGUgd2VlaywgaXQgY2FuIGJlIDEgaWYgd2VlayBzdGFydHMgZnJvbSBtb25kYXlcbiAgICAgKiBhbmQgMCBpZiBmcm9tIHN1bmRheSBhbmQgc28gb24uXG4gICAgICogKi9cbiAgICBnZXRGaXJzdERheU9mV2VlaygpOiBudW1iZXI7XG4gICAgZ2V0TW9udGhOYW1lKGRhdGU6IERhdGUsIHN0eWxlPzogVHJhbnNsYXRpb25XaWR0aCk6IHN0cmluZztcbiAgICBnZXRNb250aE5hbWVCeUluZGV4KGluZGV4OiBudW1iZXIsIHN0eWxlPzogVHJhbnNsYXRpb25XaWR0aCk6IHN0cmluZztcbiAgICBnZXREYXlPZldlZWtOYW1lcygpOiBzdHJpbmdbXTtcbiAgICBmb3JtYXQoZGF0ZTogRGF0ZSwgZm9ybWF0OiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogV2UgaGF2ZW4ndCBnb3QgY2FwYWJpbGl0eSB0byBwYXJzZSBkYXRlIHVzaW5nIGZvcm1hdHRpbmcgd2l0aG91dCB0aGlyZCBwYXJ0eSBsaWJyYXJpZXMuXG4gICAgICogKi9cbiAgICBwYXJzZShkYXRlOiBzdHJpbmcsIGZvcm1hdDogc3RyaW5nKTogRGF0ZTtcbiAgICBhZGREYXkoZGF0ZTogRGF0ZSwgbnVtOiBudW1iZXIpOiBEYXRlO1xuICAgIGFkZE1vbnRoKGRhdGU6IERhdGUsIG51bTogbnVtYmVyKTogRGF0ZTtcbiAgICBhZGRZZWFyKGRhdGU6IERhdGUsIG51bTogbnVtYmVyKTogRGF0ZTtcbiAgICBjbG9uZShkYXRlOiBEYXRlKTogRGF0ZTtcbiAgICBjb21wYXJlRGF0ZXMoZGF0ZTE6IERhdGUsIGRhdGUyOiBEYXRlKTogbnVtYmVyO1xuICAgIGNyZWF0ZURhdGUoeWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyLCBkYXRlOiBudW1iZXIpOiBEYXRlO1xuICAgIGdldE1vbnRoRW5kKGRhdGU6IERhdGUpOiBEYXRlO1xuICAgIGdldE1vbnRoU3RhcnQoZGF0ZTogRGF0ZSk6IERhdGU7XG4gICAgZ2V0TnVtYmVyT2ZEYXlzSW5Nb250aChkYXRlOiBEYXRlKTogbnVtYmVyO1xuICAgIGdldFllYXJFbmQoZGF0ZTogRGF0ZSk6IERhdGU7XG4gICAgZ2V0WWVhclN0YXJ0KGRhdGU6IERhdGUpOiBEYXRlO1xuICAgIGlzU2FtZURheShkYXRlMTogRGF0ZSwgZGF0ZTI6IERhdGUpOiBib29sZWFuO1xuICAgIGlzU2FtZU1vbnRoKGRhdGUxOiBEYXRlLCBkYXRlMjogRGF0ZSk6IGJvb2xlYW47XG4gICAgaXNTYW1lWWVhcihkYXRlMTogRGF0ZSwgZGF0ZTI6IERhdGUpOiBib29sZWFuO1xuICAgIGdldElkKCk6IHN0cmluZztcbiAgICBnZXRXZWVrTnVtYmVyKGRhdGU6IERhdGUpOiBudW1iZXI7XG59XG4iXX0=